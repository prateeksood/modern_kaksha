[{"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\context\\userContext.js":"1","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\TutorsSec.js":"2","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AuthForm\\authForm.js":"3","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\contactFormFormValidationsRules .js":"4","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentLoginForm\\studentLoginForm.js":"5","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\registerationFormValidationRules.js":"6","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\ContactUsForm\\contactUsForm.js":"7","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\PaymentSuccessPage\\paymentSuccessPage.js":"8","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TutorVerifyEmail\\tutorVerifyEmail.js":"9","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\loginFormValidationsRules.js":"10","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Header\\header.js":"11","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\adminPanel.js":"12","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Testimonials\\Testimonials.js":"13","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\reviewFormValidationsRules.js":"14","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TutorLoginForm\\tutorLoginForm.js":"15","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\otpValidationRules.js":"16","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Nav\\nav.js":"17","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\SearchTutorSection\\searchTutorSection.js":"18","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\MsgBanner\\msgBanner.js":"19","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\StatSec.js":"20","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentVerifyEmail\\studentVerifyEmail.js":"21","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\PageNotFoundErrorPage\\pageNotFoundErrorPage.js":"22","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\RegisterSection\\registerSection.js":"23","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TopTutors\\topTutors.js":"24","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\connectPage\\connectPage.js":"25","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\UserCard\\userCard.js":"26","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\choosePlanPage\\choosePlanPage.js":"27","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AuthPage\\authPage.js":"28","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\tutorFeeDetailFormValidationRules.js":"29","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\tutorInfoFormValidationRules.js":"30","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Slidder\\slidder.js":"31","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\SubjectsCarousel\\subjectsCarousel.js":"32","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentInfoForm\\studentInfoForm.js":"33","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\index.js":"34","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\tutorFeeDetailForm\\tutorFeeDetailForm.js":"35","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TutorRegistrationForm\\tutorRegistrationForm.js":"36","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\StudentsSec.js":"37","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\hooks\\useForm.js":"38","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Loader\\loader.js":"39","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\data\\data.js":"40","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentRegistrationForm\\studentRegistrationForm.js":"41","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\HomePage\\homePage.js":"42","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\App.js":"43"},{"size":1485,"mtime":1608874033598,"results":"44","hashOfConfig":"45"},{"size":6175,"mtime":1621352196826,"results":"46","hashOfConfig":"45"},{"size":5807,"mtime":1609180368109,"results":"47","hashOfConfig":"45"},{"size":960,"mtime":1608667095760,"results":"48","hashOfConfig":"45"},{"size":4644,"mtime":1609076947424,"results":"49","hashOfConfig":"45"},{"size":1392,"mtime":1606904399563,"results":"50","hashOfConfig":"45"},{"size":7731,"mtime":1609685426869,"results":"51","hashOfConfig":"45"},{"size":1258,"mtime":1609685395028,"results":"52","hashOfConfig":"45"},{"size":4571,"mtime":1608874033597,"results":"53","hashOfConfig":"45"},{"size":417,"mtime":1606903400925,"results":"54","hashOfConfig":"45"},{"size":701,"mtime":1621258954895,"results":"55","hashOfConfig":"45"},{"size":2546,"mtime":1621352094721,"results":"56","hashOfConfig":"45"},{"size":2559,"mtime":1621261598053,"results":"57","hashOfConfig":"45"},{"size":456,"mtime":1607419883920,"results":"58","hashOfConfig":"45"},{"size":4840,"mtime":1609076969648,"results":"59","hashOfConfig":"45"},{"size":282,"mtime":1608314430914,"results":"60","hashOfConfig":"45"},{"size":7967,"mtime":1610042144994,"results":"61","hashOfConfig":"45"},{"size":2326,"mtime":1621451957977,"results":"62","hashOfConfig":"45"},{"size":1935,"mtime":1608281343843,"results":"63","hashOfConfig":"45"},{"size":3817,"mtime":1621596755815,"results":"64","hashOfConfig":"45"},{"size":4591,"mtime":1608874033598,"results":"65","hashOfConfig":"45"},{"size":1065,"mtime":1609685395028,"results":"66","hashOfConfig":"45"},{"size":3240,"mtime":1608288639171,"results":"67","hashOfConfig":"45"},{"size":2319,"mtime":1610464147542,"results":"68","hashOfConfig":"45"},{"size":16069,"mtime":1621454262832,"results":"69","hashOfConfig":"45"},{"size":6137,"mtime":1610377967389,"results":"70","hashOfConfig":"45"},{"size":14474,"mtime":1609685395029,"results":"71","hashOfConfig":"45"},{"size":576,"mtime":1609685395027,"results":"72","hashOfConfig":"45"},{"size":1525,"mtime":1608376638050,"results":"73","hashOfConfig":"45"},{"size":1152,"mtime":1609062955048,"results":"74","hashOfConfig":"45"},{"size":1542,"mtime":1620634158662,"results":"75","hashOfConfig":"45"},{"size":2997,"mtime":1621454255980,"results":"76","hashOfConfig":"45"},{"size":12025,"mtime":1610471225506,"results":"77","hashOfConfig":"45"},{"size":500,"mtime":1608213080275,"results":"78","hashOfConfig":"45"},{"size":9134,"mtime":1609838102815,"results":"79","hashOfConfig":"45"},{"size":9379,"mtime":1608972665333,"results":"80","hashOfConfig":"45"},{"size":6178,"mtime":1621352208551,"results":"81","hashOfConfig":"45"},{"size":1583,"mtime":1606997529082,"results":"82","hashOfConfig":"45"},{"size":589,"mtime":1608125158290,"results":"83","hashOfConfig":"45"},{"size":3889,"mtime":1609608560829,"results":"84","hashOfConfig":"45"},{"size":9746,"mtime":1608972648413,"results":"85","hashOfConfig":"45"},{"size":1032,"mtime":1620721030703,"results":"86","hashOfConfig":"45"},{"size":2722,"mtime":1621257803349,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"cscvk",{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"99"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"91"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"99"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"135"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"103"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"135"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"169"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"107"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"135"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"99"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"103"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"227"},"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\context\\userContext.js",["228"],"import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nexport const userContext = createContext();\r\nexport default props => {\r\n  const [user, setUser] = useState(null);\r\n  const [userLoaded, setUserLoaded] = useState(false);\r\n  const [token,setToken] = useState(localStorage.getItem(\"token\"));\r\n  const [alertMsg,setAlertMsg] = useState(null);\r\n  const [bannerMsg,setBannerMsg] = useState(null);\r\n  useEffect(()=>{\r\n    if(userLoaded){\r\n    }\r\n  },[userLoaded])\r\n\r\n  useEffect(()=>{\r\n    if(bannerMsg){\r\n      if(!bannerMsg.timmer){\r\n        window.setTimeout(()=>{\r\n            setBannerMsg();\r\n        },5000)\r\n      }\r\n    }\r\n  },[bannerMsg])\r\n\r\n  useEffect(() => {\r\n    setUserLoaded(false)\r\n    if (token) {\r\n      let config = {\r\n        headers: {\r\n          \"x-auth-token\": token\r\n        }\r\n      };\r\n      const fetchUser= async ()=>{\r\n        try{\r\n          const res= await axios.get(`/api/auth/`, config);\r\n          setUser(res.data.result);\r\n          setUserLoaded(true);\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            setBannerMsg({message:`Something went wrong!`});\r\n        }\r\n      }\r\n      fetchUser();\r\n    }else{\r\n      setUserLoaded(true);\r\n    }\r\n\r\n  }, [token]);\r\n  useEffect(()=>{\r\n  },[user])\r\n  return (\r\n    <userContext.Provider value={{ user, setUser,setToken,setAlertMsg,alertMsg,userLoaded,bannerMsg,setBannerMsg}}>\r\n      {props.children}\r\n    </userContext.Provider>\r\n  );\r\n};\r\n",["229","230"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\TutorsSec.js",["231","232","233","234"],"import React, { useEffect, useState,useContext } from 'react';\r\nimport styles from './adminPanel.module.scss';\r\nimport axios from 'axios'\r\nimport {userContext} from '../../context/userContext'\r\nimport { Redirect, useHistory, useLocation } from \"react-router-dom\";\r\nimport PageNotFoundErrorPage from '../PageNotFoundErrorPage/pageNotFoundErrorPage';\r\nconst TutorsSec= (props)=> {\r\n    const {setBannerMsg,user,userLoaded,setAlertMsg}=useContext(userContext);\r\n    const months=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October','November','December']\r\n    const pageSize=20;\r\n    const history=useHistory();\r\n    const [refresh,setRefresh]=useState(true);\r\n    const [isLoading,setIsLoading]=useState(true);\r\n    const [hasMore,setHasMore]=useState(true);\r\n    const [profiles,setProfiles]=useState([]);\r\n    const location=useLocation();\r\n    const [data,setData]=useState({\r\n        feesPeriod:'allfees',\r\n        pincodes:[],\r\n        minimumFees:0,\r\n        maximumFees:500000,\r\n        subjects:[],\r\n        pageNumber:1,\r\n        pageSize:pageSize\r\n    });\r\n    const changePageNumber=()=>{\r\n        setRefresh(false);\r\n        setData(prev=>({...prev,pageNumber:prev.pageNumber+1}));\r\n    }\r\n    useEffect(()=>{\r\n        const fetchTeachers=async ()=>{\r\n            setIsLoading(true);\r\n\r\n            try{\r\n\r\n                const res= await axios.post(`/api/teachers/`,data);\r\n                if(!res.data.error){\r\n                    setHasMore(res.data.result.length===pageSize)\r\n                    if(refresh){\r\n                        setProfiles(res.data.result);\r\n                    }\r\n                    else{\r\n                        setProfiles(prev=>prev.concat(res.data.result));\r\n                    }\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                setBannerMsg({message:`Something went wrong!`});\r\n                setIsLoading(false)\r\n            }\r\n            finally{\r\n                setIsLoading(false)\r\n            }\r\n                \r\n        }\r\n        if(user&&user.isStepOneDone&&user.isVerified){\r\n            fetchTeachers();\r\n        }\r\n    },[data,user]);\r\n    const handleAdActiveChange=async(adID,activeStatus)=>{\r\n        let data={\r\n            _id:adID,\r\n            isAdActive:!activeStatus,\r\n        }\r\n        const config = {\r\n            headers: {\r\n                'x-auth-token':localStorage.getItem(\"token\")\r\n            }\r\n        };\r\n        try{\r\n            const res = await axios.put(`/api/teachers/updateAd`,data,config);\r\n            const updatedAds = profiles.map(ad =>\r\n                ad._id === adID\r\n                    ? { ...ad, isAdActive:!activeStatus}\r\n                    : ad\r\n            );\r\n            setProfiles(updatedAds);\r\n            setBannerMsg({message:'Ad Status successfully updated'});\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            setBannerMsg({message:`Something went wrong!`});\r\n        }\r\n    }\r\n    if(!user&&userLoaded&&!isLoading){\r\n        setBannerMsg({message:'Kindly login to continue'})\r\n        return <Redirect to={{pathname:'/auth',state:{backUrl:location.pathname}}}/>\r\n    }\r\n    if(userLoaded&&user&&!user.isAdmin){\r\n        return <PageNotFoundErrorPage/>\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className={styles.studentsMainSection}>\r\n                <h1 className={styles.heading}>Tutors' Ads</h1>\r\n                {/* <div className={styles.searchHolder}>\r\n                    <input type=\"search\" name=\"searchTeacher\" className={styles.searchInput}/>\r\n                    <input type=\"submit\" value=\"Search\" className={styles.searchBtn}/>\r\n                </div> */}\r\n                <div className={styles.studentsMainTable}>\r\n                    <div className={styles.recordHead}>\r\n                        <div className={styles.serialNo}>S.No</div>\r\n                        <div className={styles.name}>Name</div>\r\n                        <div className={styles.date}>Date</div>\r\n                        <div className={styles.studyingMode}>Mode of Teaching</div>\r\n                        <div className={styles.contact}>Subject</div>\r\n                        <div className={styles.action}>Actions</div>\r\n                    </div>\r\n                    {\r\n                        profiles.map((ad,key)=>(\r\n                            <div className={styles.record} key={key}>\r\n                                <div className={styles.serialNo}>{key+1}</div>\r\n                                <div className={styles.name}>{ad.name}</div>\r\n                                <div className={styles.date}>{`${new Date(ad.date).getDate()}-${months[new Date(ad.date).getMonth()]}-${new Date(ad.date).getFullYear()}`}</div>\r\n                                <div className={styles.studyingMode}>{ad.teachingMode}</div>\r\n                                <div className={styles.contact}>{ad.subject.value}</div>\r\n                                <div className={styles.action}>\r\n                                {ad.isAdActive?\r\n                                    <span className={styles.activeTag} onClick={()=>handleAdActiveChange(ad._id,ad.isAdActive)}>Active</span>:\r\n                                    <span className={styles.InactiveTag} onClick={()=>handleAdActiveChange(ad._id,ad.isAdActive)}>Inactive</span>\r\n                                }\r\n                                    <span className={styles.viewBtn}><a href={`/profile/${ad.ownerId}`}>View</a></span>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                {(hasMore&&!isLoading)&&\r\n                    <div className={styles.loadMoreBtn} onClick={changePageNumber}>\r\n                        <div >Load More</div>\r\n                    </div>\r\n                } \r\n                {(isLoading)&&\r\n                    <div className={styles.loading}>\r\n                        <div >Loading...</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default TutorsSec;",["235","236"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AuthForm\\authForm.js",["237"],"import React, { useEffect, useState } from 'react';\r\nimport styles from './authForm.module.scss';\r\nimport StudentRegistrationorm from '../StudentRegistrationForm/studentRegistrationForm';\r\nimport StudentLoginForm from '../StudentLoginForm/studentLoginForm';\r\nimport StudentInfoForm from '../StudentInfoForm/studentInfoForm';\r\nimport TutorRegistrationForm from '../TutorRegistrationForm/tutorRegistrationForm';\r\nimport TutorInfoForm from '../TutorInfoForm/tutorInfoForm';\r\nimport TutorFeeDetailForm from '../tutorFeeDetailForm/tutorFeeDetailForm';\r\nimport TutorLoginForm from '../TutorLoginForm/tutorLoginForm';\r\nimport { useLocation } from 'react-router-dom';\r\nimport TutorVerifyEmailForm from '../TutorVerifyEmail/tutorVerifyEmail';\r\nimport StudentVerifyEmailForm from '../StudentVerifyEmail/studentVerifyEmail';\r\nimport { useElementScroll } from 'framer-motion';\r\n\r\n\r\nconst AuthForm= (props)=> {\r\n    const location=useLocation();\r\n    const [backUrl,setBackUrl]=useState();\r\n    const [formType,setFormType]=useState(()=>{\r\n        if(location.state){\r\n            if(location.state.formType){\r\n                return location.state.formType;\r\n            }\r\n            if(location.state.backUrl){\r\n                setBackUrl(location.state.backUrl);\r\n            }\r\n        }else{\r\n            setBackUrl('/connect')\r\n        }\r\n        return 'studentLogin';\r\n    });\r\n    useEffect(()=>{\r\n    },[formType])\r\n    const Form =(props)=>{\r\n        if(props.formType==='tutorRegistration'){\r\n            window.scrollTo(0, 0);\r\n            return <TutorRegistrationForm  formType={props.formType} setFormType={setFormType}/>\r\n        }\r\n        else if(props.formType==='tutorLogin'){\r\n            window.scrollTo(0, 0);\r\n            return <TutorLoginForm  formType={props.formType} setFormType={setFormType} backUrl={backUrl}/>\r\n        }\r\n        else if(props.formType==='studentRegistration'){\r\n            window.scrollTo(0, 0);\r\n            return <StudentRegistrationorm  formType={props.formType} setFormType={setFormType} />\r\n        }\r\n        else if(props.formType==='studentLogin'){\r\n            window.scrollTo(0, 0);\r\n            return <StudentLoginForm  formType={props.formType} setFormType={setFormType} backUrl={backUrl}/>\r\n        }\r\n        else if(props.formType==='studentInfoForm'){\r\n            window.scrollTo(0, 0);\r\n            return <StudentInfoForm  formType={props.formType} setFormType={setFormType} isEditProfileForm={false} backUrl={backUrl}/>\r\n        }\r\n        else if(props.formType==='studentEditProfileForm'){\r\n            window.scrollTo(0, 0);\r\n            return <StudentInfoForm  formType={props.formType} setFormType={setFormType} isEditProfileForm={true} backUrl={backUrl}/>\r\n        }\r\n        else if(props.formType==='tutorInfoForm'){\r\n            window.scrollTo(0, 0);\r\n            return <TutorInfoForm  formType={props.formType} setFormType={setFormType} isEditProfileForm={false}/>\r\n        }\r\n        else if(props.formType==='tutorEditProfileForm1'){\r\n            window.scrollTo(0, 0);\r\n            return <TutorInfoForm  formType={props.formType} setFormType={setFormType} isEditProfileForm={true}/>\r\n        }\r\n        else if(props.formType==='tutorFeeDetailForm'){\r\n            window.scrollTo(0, 0);\r\n            return <TutorFeeDetailForm formType={props.formType} setFormType={setFormType} isEditProfileForm={false} backUrl={backUrl}/>\r\n        }\r\n        else if(props.formType==='tutorEditProfileForm2'){\r\n            window.scrollTo(0, 0);\r\n            return <TutorFeeDetailForm formType={props.formType} setFormType={setFormType} isEditProfileForm={true} backUrl={backUrl}/>\r\n        }\r\n        else if(props.formType==='tutorVerifyEmailForm'){\r\n            window.scrollTo(0, 0);\r\n            return <TutorVerifyEmailForm formType={props.formType} setFormType={setFormType}/>\r\n        }\r\n        else if(props.formType==='studentVerifyEmailForm'){\r\n            window.scrollTo(0, 0);\r\n            return <StudentVerifyEmailForm formType={props.formType} setFormType={setFormType}/>\r\n        }\r\n        else{\r\n            return <></>\r\n        }\r\n    }\r\n    const showStudentForm=()=>{\r\n        if(formType==='studentRegistration'||formType==='tutorRegistration'){\r\n            setFormType('studentRegistration')\r\n        }\r\n        else{\r\n            setFormType('studentLogin')\r\n        }\r\n    }\r\n    const showTutorForm=()=>{\r\n        if(formType==='studentRegistration'||formType==='tutorRegistration'){\r\n            setFormType('tutorRegistration');\r\n        }\r\n        else{\r\n            setFormType('tutorLogin');\r\n        }\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className={styles.registerForm}>\r\n            <div className={styles.imgContainer}></div>\r\n            {(formType==='studentRegistration'||formType==='studentLogin'||formType==='tutorRegistration'||formType==='tutorLogin')&&\r\n                <div className={styles.accountTypeHolder}>\r\n                    <span \r\n                    className={formType==='studentRegistration'||formType==='studentLogin'?`${styles.accountType} ${styles.activeType}`:styles.accountType} \r\n                    onClick={showStudentForm}\r\n                    >\r\n                        Student\r\n                    </span>\r\n                    <span \r\n                    className={formType==='tutorRegistration'||formType==='tutorLogin'?`${styles.accountType} ${styles.activeType}`:styles.accountType} \r\n                    onClick={showTutorForm}\r\n                    >\r\n                        Tutor\r\n                    </span>\r\n                </div>\r\n            }\r\n            <div className={styles.formHolder}> \r\n                <Form formType={formType}/>\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AuthForm;",["238","239"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\contactFormFormValidationsRules .js",["240"],"export default (values,touched)=> {\r\n    let errors = {};\r\n    if(touched.name){\r\n      if (!values.name) {\r\n        errors.name = 'Name is required';\r\n      } else if (!/^([a-z']+( )?)+$/i.test(values.name)) {\r\n        errors.name = 'Name can only contain alphabets and space';\r\n      }\r\n    }\r\n    if(touched.email){\r\n      if (!values.email && touched.email) {\r\n        errors.email = 'Email address is required';\r\n      } else if (!/\\S+@\\S+\\.\\S+/i.test(values.email)) {\r\n        errors.email = 'Email address is invalid';\r\n      }\r\n    }\r\n    if(touched.contactNumber){\r\n      if (!values.contactNumber) {\r\n        errors.contactNumber = 'Contact number is required';\r\n      } else if (!/^[1-9]\\d{9}$/.test(values.contactNumber)) {\r\n        errors.contactNumber = 'Contact number is invalid';\r\n      }\r\n    }\r\n    if(touched.message){\r\n      if (!values.message) {\r\n        errors.message = 'Message is required';\r\n      } \r\n    }\r\n    return errors;\r\n  };",["241","242"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentLoginForm\\studentLoginForm.js",["243","244"],"import React,{useEffect,useState,useContext} from 'react';\r\nimport {Redirect, useHistory} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {userContext} from '../../context/userContext'\r\nimport useForm from '../../hooks/useForm'\r\nimport validationRules from '../../validationRules/loginFormValidationsRules'\r\nimport {motion} from 'framer-motion'\r\nimport styles from '../AuthForm/authForm.module.scss'\r\n\r\nconst StudentLoginForm=({formType, setFormType,backUrl})=> {\r\n\r\n    const [loginSuccess,setLoginSuccess]=useState(false);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const {setUser,setAlertMsg,userLoaded, setBannerMsg,user} = useContext(userContext);\r\n    const history=useHistory();\r\n    useEffect(()=>{\r\n        if(userLoaded){\r\n          localStorage.removeItem('token');\r\n          setUser(null);\r\n        }\r\n        \r\n      },[userLoaded]);\r\n\r\n      useEffect(()=>{\r\n        if(user){\r\n            if(!user.isVerified){\r\n                setAlertMsg({message:'Verify your email to proceed'})\r\n                setFormType('studentVerifyEmailForm')\r\n            }\r\n            else if(!user.isStepOneDone){\r\n                setAlertMsg({message:'Complete registration to proceed'})\r\n                setFormType('studentInfoForm')\r\n            }\r\n            else{\r\n                setLoginSuccess(true)\r\n            }\r\n        }\r\n    },[user,setFormType,setAlertMsg])\r\n\r\n    const loginHandler = async () => {\r\n        const data = {\r\n          email: values.email,\r\n          password: values.password\r\n        };\r\n        try{\r\n            setIsLoading(true)\r\n            let res= await axios.post(`/api/students/login`, data)\r\n            if (!res.data.error) {\r\n                localStorage.setItem(\"token\", res.data.result.token);\r\n                setBannerMsg({message:`Welcome back ${res.data.result.user.name}`})\r\n                setIsLoading(false);\r\n                setUser(res.data.result.user);\r\n            } \r\n            else {\r\n                localStorage.removeItem(\"token\");\r\n                setUser(null);\r\n                setAlertMsg({message:res.data.error});\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            setBannerMsg({message:`Something went wrong!`});\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    const { values, errors, handleChange, handleSubmit } = useForm(\r\n    loginHandler,\r\n    validationRules\r\n    );\r\n    if(loginSuccess&&!isLoading){   \r\n        return (<Redirect to={backUrl||'/connect'}/>)\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <h3>Student Login</h3>\r\n            <div className={styles.inputContainer}>\r\n                \r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='email'>Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        className={`${errors.email? styles.validationError:styles.inputBox}`}\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"\"\r\n                        value={values.email || \"\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <div className={styles.errorMsg}>{errors.email}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='password'>Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        className={`${errors.password? styles.validationError:styles.inputBox}`}\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"\"\r\n                        value={values.password || \"\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <div className={styles.errorMsg}>{errors.password}</div>\r\n                </div>\r\n                \r\n                <div className={styles.inputHolder}>\r\n                        <input\r\n                            type=\"submit\"\r\n                            value={isLoading?`Loading...`:`Login`}\r\n                            disabled={isLoading}\r\n                        />\r\n                </div>\r\n                <p>New here? \r\n                    <span onClick={()=>{setFormType('studentRegistration')}}>Register</span>\r\n                </p>\r\n            </div>\r\n        </motion.form>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default StudentLoginForm;",["245","246"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\registerationFormValidationRules.js",["247"],"export default (values,touched)=> {\r\n    let errors = {};\r\n    if(touched.fullName){\r\n      if (!values.fullName) {\r\n        errors.fullName = 'name is required';\r\n      } else if (!/^([a-z']+( )?)+$/i.test(values.fullName)) {\r\n        errors.fullName = 'Name can only contain alphabets and space';\r\n      }\r\n    }\r\n    if(touched.email){\r\n      if (!values.email && touched.email) {\r\n        errors.email = 'Email address is required';\r\n      } else if (!/\\S+@\\S+\\.\\S+/i.test(values.email)) {\r\n        errors.email = 'Email address is invalid';\r\n      }\r\n    }\r\n    if(touched.contactNumber){\r\n      if (!values.contactNumber) {\r\n        errors.contactNumber = 'contact number is required';\r\n      } else if (!/^[1-9]\\d{9}$/.test(values.contactNumber)) {\r\n        errors.contactNumber = 'contact number is invalid';\r\n      }\r\n    }\r\n    if(touched.password){\r\n      if (!values.password) {\r\n        errors.password = 'Password is required';\r\n      } else if (values.password.length < 8) {\r\n        errors.password = 'Password must be 8 or more characters';\r\n      }\r\n    }\r\n    if(touched.confirmPassword){\r\n      if (!values.confirmPassword) {\r\n        errors.confirmPassword = 'kindly confirm your password';\r\n      }\r\n       else if (values.confirmPassword!==values.password) {\r\n        errors.confirmPassword = 'Passwords didnt match';\r\n      }\r\n    }\r\n    \r\n    return errors;\r\n  };\r\n  ","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\ContactUsForm\\contactUsForm.js",[],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\PaymentSuccessPage\\paymentSuccessPage.js",["248"],"import {Helmet} from \"react-helmet\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport AuthForm from '../AuthForm/authForm'\r\nimport styles from './paymentSuccessPage.module.scss'\r\nconst PaymentSuccessPage= (props)=> {\r\n    const [timmer,setTimmer]=useState(5);\r\n    let paymentId=props.paymentId||'';\r\n\r\n    useEffect(()=>{\r\n        if(timmer>0){\r\n            window.setTimeout(()=>{\r\n                setTimmer(prev=>prev-1);\r\n            },1000);\r\n        }\r\n    },[timmer])\r\n\r\n    if(timmer===0){\r\n        return <Redirect to='/'/>\r\n    }\r\n    return (\r\n        <div className={styles.paymentSuccessPage}>\r\n            <Helmet>\r\n                <title>Payment Success | Modern Kaksha</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Payment Successful \"\r\n                />\r\n            </Helmet>\r\n            <h2>Payment Successful</h2>\r\n            <div className={styles.paymentDetails}>\r\n                <div className={styles.heading}>Payment Id: </div>\r\n                <span>{paymentId}</span>\r\n            </div>\r\n            <p> You will be redirected in {timmer} seconds</p>\r\n        </div>\r\n    );\r\n}\r\nexport default PaymentSuccessPage;","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TutorVerifyEmail\\tutorVerifyEmail.js",["249","250","251"],"import React, { useEffect, useState,useContext } from 'react';\r\nimport { userContext } from \"../../context/userContext\";\r\nimport axios from 'axios';\r\nimport useForm from '../../hooks/useForm';\r\nimport validationRules from '../../validationRules/otpValidationRules';\r\nimport {motion} from 'framer-motion';\r\nimport styles from '../AuthForm/authForm.module.scss';\r\n\r\nconst TutorVerifyEmailForm= ({formType, setFormType})=> {\r\n    const [registerationSuccess,setRegisterationSuccess]=useState(false);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const {setUser,setAlertMsg,userLoaded,setBannerMsg } = useContext(userContext);\r\n    const [timmer,setTimmer]=useState(60000);\r\n\r\n    useEffect(()=>{\r\n        let timeOutFunc;\r\n        if(timmer>0){\r\n            timeOutFunc=window.setTimeout(()=>{\r\n                setTimmer(prev=>prev-1000);\r\n            },1000)\r\n        }\r\n        return(()=>{\r\n            window.clearTimeout(timeOutFunc)\r\n        })\r\n    },[timmer,setTimmer]);\r\n    useEffect(()=>{\r\n        if(registerationSuccess){\r\n            setFormType('tutorInfoForm');\r\n            setBannerMsg({message:'OTP verified. Welcome to delta Educators'})\r\n        }\r\n    },[registerationSuccess])\r\n\r\n    const sendMail=async ()=>{\r\n        setIsLoading(true);\r\n        setTimmer(60000);\r\n        try{\r\n            const config = {\r\n                headers: {\r\n                    'x-auth-token':localStorage.getItem(\"token\")\r\n                }\r\n            };\r\n            const res = await axios.get(`/api/auth/send-verification-email`,config);\r\n            if(!res.data.error){\r\n                setAlertMsg({message:'OTP sent successfully'});\r\n            }\r\n            else{\r\n                setAlertMsg({message:res.data.error});\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            setBannerMsg({message:`Something went wrong!`});\r\n        } \r\n        setIsLoading(false)\r\n    }\r\n\r\n    const registerationHandler =async () => {\r\n            setIsLoading(true);\r\n            const data={\r\n                otp:values.otp\r\n            }\r\n            \r\n            try{\r\n                const config = {\r\n                    headers: {\r\n                        'x-auth-token':localStorage.getItem(\"token\")\r\n                    }\r\n                };\r\n                const res = await axios.post(`/api/auth/verify-email`,data,config);\r\n                if(!res.data.error){\r\n                    setRegisterationSuccess(true);\r\n                }\r\n                else {\r\n                    setAlertMsg({message:res.data.error});\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                setBannerMsg({message:`Something went wrong!`});\r\n            } \r\n            setIsLoading(false) \r\n    }\r\n\r\n    const { values, errors, handleChange, handleSubmit } = useForm(\r\n        registerationHandler,\r\n        validationRules\r\n    );\r\n    return (\r\n\r\n      <React.Fragment>\r\n        <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit}>\r\n            <h3>Verify you email</h3>\r\n            <div className={styles.inputContainer}>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='otp'>Enter OTP</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            className={`${errors.otp? styles.validationError:styles.inputBox}`}\r\n                            name=\"otp\"\r\n                            id=\"otp\"\r\n                            placeholder=\"\"\r\n                            value={values.otp || \"\"}\r\n                            onChange={handleChange}\r\n                        />\r\n                    <div className={styles.errorMsg}>{errors.otp}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <input\r\n                        type=\"submit\"\r\n                        className={`${styles.inputBox}`}\r\n                        value={isLoading?`Loading...`:`Verify`}\r\n                        disabled={isLoading}\r\n                    />\r\n                </div>\r\n                <p>Didn't recieve OTP? \r\n                    {\r\n                        timmer<=0?<span onClick={sendMail}>send again</span>\r\n                        :\r\n                        <span>Wait for {timmer/1000} seconds before requesting OTP again</span>\r\n                    }\r\n                </p>\r\n            </div>\r\n        </motion.form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default TutorVerifyEmailForm;\r\n","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\loginFormValidationsRules.js",["252"],"export default (values,touched)=> {\r\n    let errors = {};\r\n    if(touched.email){\r\n      if (!values.email) {\r\n        errors.email = 'Email address is required';\r\n      } else if (!/\\S+@\\S+\\.\\S+/i.test(values.email)) {\r\n        errors.email = 'Email address is invalid';\r\n      }\r\n    }\r\n    if ( touched.password&&!values.password) {\r\n      errors.password = 'Password is required';\r\n    }\r\n    return errors;\r\n  };","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Header\\header.js",["253","254"],"import React from \"react\";\r\nimport {motion} from 'framer-motion'\r\nimport styles from './header.module.scss';\r\nimport logo from '../../resources/images/logo2.png'\r\nimport { useLocation } from \"react-router-dom\";\r\nexport default () => {\r\n  const location=useLocation();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {location.pathname==='/'&&\r\n      <motion.header initial={{opacity:0}} animate={{opacity:1}}>\r\n        <div className={styles.siteBanner}>\r\n          <div className={styles.logo}><img src={logo}></img></div>\r\n          {/* <div className={styles.siteTitle}>\r\n            Modern Kaksha\r\n          </div> */}\r\n        </div>\r\n      </motion.header>\r\n}\r\n    </React.Fragment>\r\n    \r\n  );\r\n};\r\n","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\adminPanel.js",["255","256","257","258"],"import { set } from 'mongoose';\r\nimport React, { useEffect, useState,useContext } from 'react';\r\nimport styles from './adminPanel.module.scss';\r\nimport StatSec from './StatSec';\r\nimport StudentsSec from './StudentsSec';\r\nimport Loader from \"../Loader/loader\";\r\nimport TutorsSec from './TutorsSec';\r\nimport { Redirect,useLocation } from \"react-router-dom\";\r\nimport {userContext} from '../../context/userContext'\r\nimport PageNotFoundErrorPage from '../PageNotFoundErrorPage/pageNotFoundErrorPage';\r\nconst AdminPanel= (props)=> {\r\n    const {setBannerMsg,user,userLoaded,setAlertMsg}=useContext(userContext);\r\n    const [currentPanel,setCurrentPanel]=useState(0);\r\n    const [isLoading,setIsLoading]=useState(1);\r\n    const [isRedirecting,setIsRedirecting]=useState(0);\r\n    const location=useLocation();\r\n\r\n    useEffect(()=>{\r\n        if(userLoaded&&user){\r\n            setIsLoading(0);\r\n        }\r\n    },[user,userLoaded]);\r\n\r\n    if(userLoaded&&!user){\r\n        setBannerMsg({message:'Kindly login to continue'})\r\n        return <Redirect to={{pathname:'/auth',state:{backUrl:location.pathname}}}/>\r\n    }\r\n    if(userLoaded&&user&&!user.isAdmin){\r\n        return <PageNotFoundErrorPage/>\r\n    }\r\n    if(isLoading){\r\n        return <div className={styles.adminPage}><Loader/></div>\r\n    }\r\n    else{\r\n        return (\r\n            <React.Fragment>\r\n                <div className={styles.adminPage}>\r\n                    <section className={styles.left}>\r\n                        <div className={styles.menuHeading}>Admin Panel</div>\r\n                        <div className={styles.menuItemsholder}>\r\n                            <div className={styles.menuItem} style={currentPanel===0?{color:'#2876A0'}:{color:'#F3F3F3'}} onClick={()=>setCurrentPanel(0)}>Statistics</div>\r\n                            <div className={styles.menuItem} style={currentPanel===1?{color:'#2876A0'}:{color:'#F3F3F3'}} onClick={()=>setCurrentPanel(1)}>Students' Ads</div>\r\n                            <div className={styles.menuItem} style={currentPanel===2?{color:'#2876A0'}:{color:'#F3F3F3'}} onClick={()=>setCurrentPanel(2)}>Tutors' Ads</div>\r\n                        </div>\r\n                    </section>\r\n                    <section className={styles.right}>\r\n                        {currentPanel===0&&<StatSec/>}\r\n                        {currentPanel===1&&<StudentsSec/>}\r\n                        {currentPanel===2&&<TutorsSec/>}\r\n                    </section>\r\n                </div>\r\n            </React.Fragment>\r\n  );\r\n}\r\n}\r\n\r\nexport default AdminPanel;",["259","260"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Testimonials\\Testimonials.js",["261","262","263","264"],"import React,{useEffect,useRef,useState,useContext} from \"react\";\r\nimport styles from './Testimonials.module.scss';\r\nimport Aos from 'aos';\r\nimport 'aos/dist/aos.css';\r\nimport {userContext} from '../../context/userContext'\r\n\r\nexport default () => {\r\n    const cardHolder=useRef();\r\n    const {user,setBannerMsg}=useContext(userContext);\r\n\r\n    let testimonials=[\r\n        {\r\n            content:\"Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sapiente, necessitatibus autem nemo nam harum, veritatis reprehenderit nostrum ab eum aliquam obcaecati architecto. Modi inventore architecto rerum cum sapiente! Dignissimos, nulla.\",\r\n            userName:\"John Doe\",\r\n            userType:\"Tutor\"\r\n        },\r\n        {\r\n            content:\"Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sapiente, necessitatibus autem nemo nam harum, veritatis reprehenderit nostrum ab eum aliquam obcaecati architecto. Modi inventore architecto rerum cum sapiente! Dignissimos, nulla.\",\r\n            userName:\"John Doe\",\r\n            userType:\"Tutor\"\r\n        },\r\n        {\r\n            content:\"Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sapiente, necessitatibus autem nemo nam harum, veritatis reprehenderit nostrum ab eum aliquam obcaecati architecto. Modi inventore architecto rerum cum sapiente! Dignissimos, nulla.\",\r\n            userName:\"John Doe\",\r\n            userType:\"Tutor\"\r\n        }\r\n    ]\r\n    useEffect(()=>{\r\n        Aos.init({duration:2000})\r\n      },[]);\r\n\r\n    return (\r\n    <React.Fragment>\r\n        <div className={user?styles.container:styles.containerBlack}>\r\n            <h2 className={styles.title} >Testimonials</h2>\r\n            <div className={styles.testimonialsContainer} id=\"testimonials\">\r\n                {testimonials.map((testimonial,i)=>(\r\n                    <div className={styles.card} key={i} data-aos='flip-right' data-aos-delay={`${i*300}`} >\r\n                        <div className={styles.mainContent}><span className={styles.opening}>&ldquo;</span> {testimonial.content}<span className={styles.closing}>&rdquo;</span></div>\r\n                        <div className={styles.arrow}></div>\r\n                        <div className={styles.userDetails}>\r\n                            <div className={styles.userName}>{testimonial.userName}</div>\r\n                            <div className={styles.userType}>{testimonial.userType}</div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    \r\n    </React.Fragment>\r\n    \r\n    );\r\n};\r\n","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\reviewFormValidationsRules.js",["265"],"export default (values,touched)=> {\r\n    let errors = {};\r\n    if(touched.reviewTitle){\r\n      if (!values.reviewTitle) {\r\n        errors.reviewTitle = 'Review title is required';\r\n      } else if (values.reviewTitle.length>50) {\r\n        errors.reviewTitle = 'Review title should be less than 50 letters';\r\n      }\r\n    }\r\n    if ( touched.reviewBody&&!values.reviewBody) {\r\n      errors.reviewBody = 'Review is required';\r\n    }\r\n    return errors;\r\n  };",["266","267"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TutorLoginForm\\tutorLoginForm.js",["268"],"import React, {useState,useContext,useEffect } from 'react';\r\nimport {Redirect} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {userContext} from '../../context/userContext'\r\nimport useForm from '../../hooks/useForm';\r\nimport validationRules from '../../validationRules/loginFormValidationsRules';\r\nimport {motion} from 'framer-motion';\r\nimport styles from '../AuthForm/authForm.module.scss';\r\n\r\nconst TutorLoginForm= ({formType, setFormType,backUrl})=> {\r\n\r\n    const [loginSuccess,setLoginSuccess]=useState(false);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const {setUser,setAlertMsg,userLoaded,setBannerMsg,user } = useContext(userContext);\r\n    useEffect(()=>{\r\n        if(userLoaded){\r\n          localStorage.removeItem('token');\r\n          setUser(null);\r\n        }\r\n        \r\n    },[userLoaded]);\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n            if(!user.isVerified){\r\n                setAlertMsg({message:'Verify your email to proceed'})\r\n                setFormType('tutorVerifyEmailForm')\r\n            }\r\n            else if(!user.isStepOneDone){\r\n                setAlertMsg({message:'Complete registration to proceed'})\r\n                setFormType('tutorInfoForm')\r\n            }\r\n            else if(!user.isStepTwoDone){\r\n                setAlertMsg({message:'Complete registration to proceed'})\r\n                setFormType('tutorFeeDetailForm');\r\n            }\r\n            else{\r\n                setLoginSuccess(true)\r\n            }\r\n        }\r\n    },[user,setFormType,setAlertMsg])\r\n\r\n    const loginHandler = async () => {\r\n        const data = {\r\n          email: values.email,\r\n          password: values.password\r\n        };\r\n        try{\r\n            setIsLoading(true)\r\n            let res= await axios.post(`/api/teachers/login`, data)\r\n            if (!res.data.error) {\r\n                localStorage.setItem(\"token\", res.data.result.token);\r\n                setBannerMsg({message:`Welcome back ${res.data.result.user.name}`})\r\n                setIsLoading(false);\r\n                setUser(res.data.result.user);\r\n            } \r\n            else {\r\n                localStorage.removeItem(\"token\");\r\n                setUser(null);\r\n                setAlertMsg({message:res.data.error});\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n            setBannerMsg({message:`Something went wrong!`});\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    const { values, errors, handleChange, handleSubmit } = useForm(\r\n    loginHandler,\r\n    validationRules\r\n    );\r\n    if(loginSuccess&&!isLoading){   \r\n        return (<Redirect to={backUrl||'/connect'}/>)\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit}>\r\n            <h3>Tutor Login</h3>\r\n            <div className={styles.inputContainer}>\r\n                \r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='email'>Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        className={`${errors.email? styles.validationError:styles.inputBox}`}\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"\"\r\n                        value={values.email || \"\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <div className={styles.errorMsg}>{errors.email}</div>\r\n                </div>\r\n                \r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='password'>Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        className={`${errors.password? styles.validationError:styles.inputBox}`}\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"\"\r\n                        value={values.password || \"\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <div className={styles.errorMsg}>{errors.password}</div>\r\n                </div>\r\n                \r\n                <div className={styles.inputHolder}>\r\n                        <input\r\n                            type=\"submit\"\r\n                            className={`${styles.inputBox}`}\r\n                            value={isLoading?`Loading...`:`Login`}\r\n                            disabled={isLoading}\r\n\r\n                        />\r\n                </div>\r\n                <p>New here? \r\n                    <span onClick={()=>{setFormType('tutorRegistration')}}>Register</span>\r\n                </p>\r\n            </div>\r\n        </motion.form>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default TutorLoginForm;\r\n",["269","270"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\otpValidationRules.js",["271"],"export default (values,touched)=> {\r\n    let errors = {};\r\n    if(touched.otp){\r\n      if (!values.otp) {\r\n        errors.otp = 'Please enter OTP';\r\n      } else if (values.otp.length!==6) {\r\n        errors.otp = 'OTP must be 6 digit long';\r\n      }\r\n    }\r\n    return errors;\r\n  };","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Nav\\nav.js",["272","273","274","275","276","277"],"import React, { useEffect, useState,useContext} from \"react\";\r\nimport { userContext } from \"../../context/userContext\";\r\nimport { NavLink,useLocation, Link, Redirect, useHistory} from \"react-router-dom\";\r\nimport {motion} from 'framer-motion'\r\nimport Aos from 'aos';\r\nimport logo from '../../resources/images/logo2.png'\r\nimport 'aos/dist/aos.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faPlus, faSignInAlt, faUser} from '@fortawesome/free-solid-svg-icons';\r\nimport styles from './nav.module.scss';\r\nconst Nav =() => {\r\n  const {alertMsg,setAlertMsg,user,userLoaded,setUser,setBannerMsg} = useContext(userContext);\r\n  const location=useLocation();\r\n  const [isNavOpen,setIsNavOpen]=useState(false);\r\n  const [isSubMenuOpen,setIsSubMenuOpen]=useState(false);\r\n  const history=useHistory();\r\n  useEffect(()=>{\r\n    if(alertMsg){\r\n      window.setTimeout(()=>{\r\n          setAlertMsg(null)\r\n      },3000);\r\n    }\r\n  },[alertMsg])\r\n\r\n  const logout=()=>{\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    setBannerMsg({message:'Logged out successfully'});\r\n    closeNav();\r\n    \r\n  }\r\n  const [showThinNav,setShowThinNav]=useState(()=>{\r\n    if(location.pathname==='/'){\r\n      return false;\r\n    }\r\n    else{\r\n      return true;\r\n    }\r\n  });\r\n  const [scrollHeight,setScrollHeight]=useState(()=>{\r\n    if(location.pathname==='/'){\r\n      return (250);\r\n    }\r\n    else{\r\n      return (0);\r\n    }\r\n  });\r\n  \r\n  useEffect(()=>{\r\n    if(location.pathname==='/'){\r\n      setScrollHeight(250);\r\n    }\r\n    else{\r\n      setScrollHeight(0);\r\n    }\r\n  },[location])\r\n\r\n  useEffect(()=>{\r\n    Aos.init({duration:2000})\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(location.pathname==='/'){\r\n      setShowThinNav(false);\r\n    }\r\n    else{\r\n      setShowThinNav(true);\r\n    }\r\n    window.addEventListener('scroll',toggleThinNav);\r\n    return ()=>{\r\n       window.removeEventListener('scroll',toggleThinNav);\r\n    }\r\n  },[scrollHeight]);\r\n\r\n\r\n  const toggleProfileSubMenu=()=>{\r\n    setIsSubMenuOpen(prev=>!prev);\r\n  }\r\n\r\n  const toggleNav=()=>{\r\n      setIsNavOpen(prev=>!prev)\r\n  }\r\n\r\n\r\n  const closeNav=()=>{\r\n    setIsNavOpen(false)\r\n  }\r\n\r\n\r\n  const toggleThinNav=()=>{\r\n    if(window.scrollY>=scrollHeight){\r\n      setShowThinNav(true);\r\n    }\r\n    else{\r\n      setShowThinNav(false);\r\n    }\r\n  }\r\n  return (\r\n    \r\n    <React.Fragment>\r\n      {location.pathname==='/'&&\r\n      <>\r\n      <div className={styles.burgerMenu} ><FontAwesomeIcon icon={faBars} onClick={toggleNav}></FontAwesomeIcon></div>\r\n      <motion.nav initial={{opacity:0}} animate={{opacity:1}} className={isNavOpen?`${styles.activeNav} ${styles.nav}`:`${styles.hiddenNav} ${styles.nav}`}>\r\n        <div className={styles.navBar}>\r\n            <div className={styles.navLinkContainer}>\r\n              <div className={styles.closeBtn}><FontAwesomeIcon icon={faPlus}  onClick={toggleNav}></FontAwesomeIcon></div>\r\n              <div className={`${styles.navLink}`} onClick={closeNav}><NavLink exact to=\"/\" activeClassName={styles.activeNavLink}>Home</NavLink></div>\r\n              <div className={styles.navLink}><NavLink exact to=\"/connect\" onClick={closeNav} activeClassName={styles.activeNavLink}>Connect</NavLink></div>\r\n              <div className={styles.navLink}><NavLink exact to=\"/choose-plan\" onClick={closeNav} activeClassName={styles.activeNavLink}>Buy Credits</NavLink></div>\r\n              <div className={styles.navLink}><NavLink exact to=\"/contact-us\" onClick={closeNav} activeClassName={styles.activeNavLink}>Contact Us</NavLink></div>\r\n              {user?\r\n                <>\r\n                  <div className={styles.mobileOnlyNavLink}><NavLink exact to={`/profile/${user._id}`} onClick={closeNav}>{user.connectsLeft} Credits</NavLink></div>\r\n                  <div className={styles.mobileOnlyNavLink}><NavLink to={`/profile/${user._id}`} onClick={closeNav} activeClassName={styles.activeNavLink}>View Profile</NavLink></div>\r\n                  {location.pathname!=='/auth'&&<div className={styles.mobileOnlyNavLink} onClick={logout}>Logout</div>}\r\n                </>\r\n              :\r\n                <div className={styles.mobileOnlyNavLink}><NavLink exact to=\"/auth\" onClick={closeNav}>Login</NavLink></div>\r\n              }\r\n            </div> \r\n        </div>\r\n      </motion.nav>\r\n      </>\r\n}\r\n{showThinNav&&\r\n    <>\r\n      <motion.nav className={styles.thinNav} initial={{height:0,opacity:0}} animate={{height:'70px',opacity:1}} transition={{ duration: .2 }}>\r\n        <div className={styles.thinNavHolder}>\r\n        <Link to=\"/\" className={styles.titleHolder}>\r\n          <img src={logo}/> \r\n          {/* <div className={styles.thinNavTitle}>Modern Kaksha</div> */}\r\n        </Link>\r\n          <div className={isNavOpen?`${styles.activeNav} ${styles.navLinkContainer}`:`${styles.hiddenNav} ${styles.thinNavLinkContainer}`}>\r\n              <div className={styles.closeBtn}><FontAwesomeIcon icon={faPlus} onClick={toggleNav}></FontAwesomeIcon></div>\r\n              <div className={styles.navLink}><NavLink exact to=\"/\" onClick={closeNav} activeClassName={styles.activeThinNavLink}>Home</NavLink></div>\r\n              <div className={styles.navLink}><NavLink exact to=\"/connect\" onClick={closeNav} activeClassName={styles.activeThinNavLink}>Connect</NavLink></div>\r\n              <div className={styles.navLink}><NavLink exact to=\"/choose-plan\" onClick={closeNav} activeClassName={styles.activeThinNavLink}>Buy Credits</NavLink></div>\r\n              <div className={styles.navLink}><NavLink exact to=\"/contact-us\" onClick={closeNav} activeClassName={styles.activeThinNavLink}>Contact Us</NavLink></div>\r\n              {user?\r\n                <>\r\n                  <div className={styles.mobileOnlyNavLink}><NavLink exact to={`/profile/${user._id}`} onClick={closeNav}>{user.connectsLeft} Credits</NavLink></div>\r\n                  <div className={styles.mobileOnlyNavLink}><NavLink to={`/profile/${user._id}`} onClick={closeNav} activeClassName={styles.activeThinNavLink}>View Profile</NavLink></div>\r\n                  {location.pathname!=='/auth'&&<div className={styles.mobileOnlyNavLink} onClick={logout}>Logout</div>}\r\n                </>\r\n              :\r\n                  <div className={styles.mobileOnlyNavLink}><NavLink exact to=\"/auth\" onClick={closeNav}>Login</NavLink></div>\r\n              }\r\n              \r\n              {user?\r\n                <div className={`${styles.navLink} ${styles.profileLink}`} onClick={toggleProfileSubMenu}><FontAwesomeIcon icon={faUser}/>{user.name.split(\" \")[0]}</div>\r\n              :\r\n              <div className={`${styles.navLink} ${styles.profileLink}`}><Link to=\"/auth\"><FontAwesomeIcon icon={faSignInAlt}/>Login</Link></div>\r\n              }\r\n          </div>\r\n          <motion.div className={styles.burgerMenuThinNav} initial={{fontSize:'0'}} animate={{fontSize:'2.5em'}}><FontAwesomeIcon icon={faBars} onClick={toggleNav} ></FontAwesomeIcon></motion.div>\r\n        </div>\r\n        {alertMsg&&\r\n        <motion.div className={styles.errorBanner} initial={{opacity:0,y:-30}} animate={{opacity:1,y:0}}>\r\n          <div>{alertMsg.message}</div>\r\n          <span onClick={()=>{setAlertMsg(null)}}>X</span>\r\n        </motion.div> }\r\n       {(user&&isSubMenuOpen)&&\r\n          <motion.div className={styles.profileSubMenu} initial={{opacity:0,y:-100}} animate={{opacity:1,y:0}}>\r\n            <div className={styles.triangleTip}></div>\r\n            <div className={styles.profileSubMenuItemHolder}>\r\n              <div className={styles.subLink}>{user.connectsLeft} Credits</div>\r\n              <div className={styles.subLink} onClick={toggleProfileSubMenu}><Link to={`/profile/${user._id}`}>View Profile</Link></div>\r\n              {location.pathname!=='/auth'&&<div className={styles.subLink} onClick={logout}>Logout</div>}\r\n            </div>\r\n          </motion.div>\r\n      }\r\n      </motion.nav>\r\n      \r\n      </>\r\n}\r\n    </React.Fragment>  \r\n  );\r\n};\r\nexport default Nav;\r\n",["278","279"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\SearchTutorSection\\searchTutorSection.js",["280","281","282","283"],"import React, { useEffect, useState,useContext } from \"react\";\r\nimport Aos from 'aos';\r\nimport {userContext} from '../../context/userContext';\r\nimport styles from './searchTutorSection.module.scss';\r\nimport {subjects} from '../../data/data';\r\nimport Select from 'react-dropdown-select';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport default () => {\r\n  const {userLoaded,user,setAlert,setBannerMsg,setUser } = useContext(userContext);\r\n  const [pincode,setPincode]=useState();\r\n  const [subjectList,setSubjectList]=useState([]);\r\n  const [startSearch,setStartSearch]=useState(false);\r\n  const pincodeChangeHandler=(e)=>{\r\n      setPincode(e.target.value)\r\n  }\r\n const onSubjectChange=(subjects)=>{\r\n    setSubjectList(subjects);\r\n }\r\n\r\n  const handleSearch=()=>{\r\n    setStartSearch(true);\r\n  }\r\n  useEffect(()=>{\r\n    Aos.init({duration:2000})\r\n  },[])\r\n\r\n  if(startSearch){\r\n    return <Redirect to={{pathname:'/connect', state:{pincode:pincode,subjectList:subjectList}}}/>\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={styles.searchTutorSection} id='search-bar'>\r\n            <div  data-aos='zoom-in'>\r\n                <div className={styles.searchHolder}>\r\n                    <div className={styles.searchSecHead}><span className={styles.mainText}>{userLoaded&&user&&user.accountType==='teacher'? 'Find Students':'Find Tutors'}</span ><span className={styles.followText}>Near You</span></div>\r\n                    <div className={styles.pinCode}><input type=\"number\" placeholder=\"Pincode\" onChange={pincodeChangeHandler}/></div>\r\n                    <div className={styles.subjects}>\r\n                          <Select\r\n                            multi\r\n                            create\r\n                            options={subjects}\r\n                            onChange={onSubjectChange}\r\n                            color=\"#2876A0\"\r\n                            labelField='value'\r\n                            sortBy='value'\r\n                            dropdownPosition='top'\r\n                            placeholder='Subject'\r\n                          />\r\n\r\n                    </div>\r\n                    <div className={styles.searchBtn}><div onClick={handleSearch}>Search</div></div>\r\n                </div>\r\n            </div>\r\n      </div>\r\n    </React.Fragment>\r\n    \r\n  );\r\n};\r\n",["284","285"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\MsgBanner\\msgBanner.js",["286"],"import React,{useContext, useEffect,useState} from 'react';\r\nimport styles from './msgBanner.module.scss'\r\nimport {userContext} from \"../../context/userContext\"\r\nimport {motion} from 'framer-motion';\r\nconst MsgBanner=()=>{\r\n    const [isDisconnected,setIsDisconnected]=useState(false)\r\n    const {bannerMsg,setBannerMsg}=useContext(userContext);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener('online', handleConnectionChange);\r\n        window.addEventListener('offline', handleConnectionChange);\r\n\r\n        return ()=>{\r\n            window.removeEventListener('online', handleConnectionChange);\r\n            window.removeEventListener('offline', handleConnectionChange);\r\n        }\r\n\r\n    },[]);\r\n    useEffect(()=>{\r\n        if(isDisconnected){\r\n            setBannerMsg({message:'No internet Connection.',timmer:1})\r\n        }\r\n        else{\r\n            setBannerMsg();\r\n        }\r\n    },[isDisconnected]);\r\n    const handleConnectionChange = () => {\r\n        const condition = navigator.onLine ? 'online' : 'offline';\r\n        if (condition === 'online') {\r\n          const webPing = setInterval(\r\n            () => {\r\n              fetch('//google.com', {\r\n                mode: 'no-cors',\r\n                })\r\n              .then(() => {\r\n                setIsDisconnected(false);\r\n                return clearInterval(webPing)\r\n              })\r\n              .catch(\r\n                  setIsDisconnected(true)\r\n              )\r\n            }, 2000);\r\n          return;\r\n        }\r\n  \r\n        return setIsDisconnected(true);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {\r\n            bannerMsg&&\r\n            <motion.div  initial={{opacity:0,y:200}} animate={{opacity:1,y:0}} className={styles.msgBanner}>\r\n                <div className={styles.message}>\r\n                    {bannerMsg.message}\r\n                </div>\r\n            </motion.div>\r\n        }\r\n        </>\r\n        \r\n    )\r\n}\r\nexport default MsgBanner;","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\StatSec.js",["287","288","289","290","291","292","293"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentVerifyEmail\\studentVerifyEmail.js",["294","295","296"],"import React, { useEffect, useState,useContext } from 'react';\r\nimport { userContext } from \"../../context/userContext\";\r\nimport axios from 'axios';\r\nimport useForm from '../../hooks/useForm';\r\nimport validationRules from '../../validationRules/otpValidationRules';\r\nimport {motion} from 'framer-motion';\r\nimport styles from '../AuthForm/authForm.module.scss';\r\n\r\nconst StudentVerifyEmailForm= ({formType, setFormType})=> {\r\n    const [registerationSuccess,setRegisterationSuccess]=useState(false);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const {setUser,setAlertMsg,userLoaded,setBannerMsg } = useContext(userContext);\r\n    const [timmer,setTimmer]=useState(60000);\r\n\r\n    useEffect(()=>{\r\n        let timeOutFunc;\r\n        if(timmer>0){\r\n            timeOutFunc=window.setTimeout(()=>{\r\n                setTimmer(prev=>prev-1000);\r\n            },1000)\r\n        }\r\n        return(()=>{\r\n            window.clearTimeout(timeOutFunc)\r\n        })\r\n    },[timmer,setTimmer]);\r\n    useEffect(()=>{\r\n        if(registerationSuccess){\r\n            setFormType('studentInfoForm');\r\n            setBannerMsg({message:'OTP verified. Welcome to delta Educators'})\r\n        }\r\n    },[registerationSuccess])\r\n\r\n    const sendMail=async ()=>{\r\n        setIsLoading(true);\r\n        setTimmer(60000);\r\n        try{\r\n            const config = {\r\n                headers: {\r\n                    'x-auth-token':localStorage.getItem(\"token\")\r\n                }\r\n            };\r\n            const res = await axios.get(`/api/auth/send-verification-email`,config);\r\n            if(!res.data.error){\r\n                setAlertMsg({message:'OTP sent successfully'});\r\n            }\r\n            \r\n            else{\r\n                setAlertMsg({message:res.data.error});\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            setBannerMsg({message:`Something went wrong!`});\r\n        } \r\n        setIsLoading(false)\r\n    }\r\n\r\n    const registerationHandler =async () => {\r\n            setIsLoading(true);\r\n            const data={\r\n                otp:values.otp\r\n            }\r\n            \r\n            try{\r\n                const config = {\r\n                    headers: {\r\n                        'x-auth-token':localStorage.getItem(\"token\")\r\n                    }\r\n                };\r\n                const res = await axios.post(`/api/auth/verify-email`,data,config);\r\n                if(!res.data.error){\r\n                    setRegisterationSuccess(true);\r\n                }\r\n                else {\r\n                    setAlertMsg({message:res.data.error});\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                setBannerMsg({message:`Something went wrong!`});\r\n            } \r\n            setIsLoading(false) \r\n    }\r\n\r\n    const { values, errors, handleChange, handleSubmit } = useForm(\r\n        registerationHandler,\r\n        validationRules\r\n    );\r\n    return (\r\n\r\n      <React.Fragment>\r\n        <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit}>\r\n            <h3>Verify you email</h3>\r\n            <div className={styles.inputContainer}>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='otp'>Enter OTP</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            className={`${errors.otp? styles.validationError:styles.inputBox}`}\r\n                            name=\"otp\"\r\n                            id=\"otp\"\r\n                            placeholder=\"\"\r\n                            value={values.otp || \"\"}\r\n                            onChange={handleChange}\r\n                        />\r\n                    <div className={styles.errorMsg}>{errors.otp}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <input\r\n                        type=\"submit\"\r\n                        className={`${styles.inputBox}`}\r\n                        value={isLoading?`Loading...`:`Verify`}\r\n                        disabled={isLoading}\r\n                    />\r\n                </div>\r\n                <p>Didn't recieve OTP? \r\n                    {\r\n                        timmer<=0?<span onClick={sendMail}>send again</span>\r\n                        :\r\n                        <span>Wait for {timmer/1000} seconds before requesting OTP again</span>\r\n                    }\r\n                </p>\r\n            </div>\r\n        </motion.form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default StudentVerifyEmailForm;\r\n",["297","298"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\PageNotFoundErrorPage\\pageNotFoundErrorPage.js",[],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\RegisterSection\\registerSection.js",["299","300","301"],"import React,{useEffect,useContext} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Aos from 'aos';\r\nimport 'aos/dist/aos.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDoubleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport styles from './registerSection.module.scss';\r\nimport {userContext} from '../../context/userContext'\r\n\r\nexport default () => {\r\n  useEffect(()=>{\r\n    Aos.init({duration:2000})\r\n  },[])\r\n  const {user}=useContext(userContext)\r\n  return (\r\n    <React.Fragment>\r\n      {!user&&\r\n        <div id=\"signinSection\" className={styles.signinSection}>\r\n              <div className={styles.studentSection}>\r\n                  <div className={styles.content}>\r\n                      <h2 className={styles.studentSecHead} data-aos='zoom-in'>Hire a tutor</h2>\r\n                      <div className={styles.studentRegisterBtn}>\r\n                          <Link data-aos='fade-up' to={\r\n                            {\r\n                              pathname:'/auth',\r\n                              state:{\r\n                              formType:'studentRegistration'\r\n                              }\r\n                            }\r\n                          }>\r\n                              Register \r\n                          </Link>\r\n                      </div>\r\n                      <div className={styles.alreadyRegisteredText} data-aos='fade-up'>Already Registered? <span>\r\n                        <Link data-aos='fade-up' to={\r\n                            {\r\n                              pathname:'/auth',\r\n                              state:{\r\n                                formType:'studentLogin'\r\n                              }\r\n                            }\r\n                        }>\r\n                            Login\r\n                        </Link>\r\n                      </span></div>\r\n                  </div>\r\n              </div>\r\n              <div className={styles.tutorSection}>\r\n                  <div className={styles.content}>\r\n                      <h2 className={styles.tutorSecHead} data-aos='zoom-in'>Become a tutor</h2>\r\n                      <div className={styles.tutorRegisterBtn}>\r\n                      <Link data-aos='fade-up' to={\r\n                        {\r\n                          pathname:'/auth',\r\n                          state:{\r\n                            formType:'tutorRegistration'\r\n                          }\r\n                        }\r\n                      }>\r\n                          Register \r\n                      </Link>\r\n                      </div>\r\n                      <div className={styles.alreadyRegisteredText}  data-aos='fade-up'>Already Registered? <span>\r\n                        <Link data-aos='fade-up' to={\r\n                          {\r\n                            pathname:'/auth',\r\n                            state:{\r\n                              formType:'tutorLogin'\r\n                            }\r\n                          }\r\n                        }>\r\n                          Login\r\n                        </Link>\r\n                      </span></div>\r\n                  </div>\r\n              </div>\r\n        </div>\r\n      }\r\n    </React.Fragment>\r\n    \r\n  );\r\n};\r\n",["302","303"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TopTutors\\topTutors.js",["304","305"],"import React,{useEffect,useState,useContext} from \"react\";\r\nimport axios from 'axios';\r\nimport styles from './topTutors.module.scss';\r\nimport UserCard from '../UserCard/userCard'\r\nimport {userContext} from '../../context/userContext'\r\nconst TopTutors= () => {\r\n    const [profiles,setProfiles]=useState([]);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const {user,setBannerMsg}=useContext(userContext);\r\n    useEffect(()=>{\r\n        let data={\r\n            feesPeriod:'allfees',\r\n            pincodes:[],\r\n            minimumFees:0,\r\n            maximumFees:500000,\r\n            subjects:[],\r\n            pageNumber:1,\r\n            pageSize:6\r\n        }\r\n        const fetchTeachers=async ()=>{\r\n            setIsLoading(true)\r\n            try{\r\n\r\n                const res= await axios.post(`/api/teachers/`,data);\r\n                if(!res.data.error){\r\n                setProfiles(res.data.result);\r\n                }\r\n            }\r\n            catch(err){\r\n                setBannerMsg({message:`Something went wrong!`});\r\n                setIsLoading(false)\r\n            }\r\n                setIsLoading(false)\r\n        }\r\n\r\n        const fetchStudents=async ()=>{\r\n            setIsLoading(true)\r\n            try{\r\n\r\n                const res= await axios.post(`/api/students/`,data);\r\n                if(!res.data.error){\r\n                    setProfiles(res.data.result);\r\n                }\r\n            }\r\n            catch(err){\r\n                setBannerMsg({message:`Something went wrong!`});\r\n                setIsLoading(false)\r\n            }\r\n                setIsLoading(false)\r\n        }\r\n        if(user){\r\n            if(user.accountType==='teacher'){\r\n                fetchStudents();\r\n            }else{\r\n                fetchTeachers();\r\n            }\r\n        }\r\n        \r\n    },[user]);\r\n    return (\r\n    <React.Fragment>\r\n    {user&&<div className={styles.topTutors} > \r\n        <h2 className={styles.topTutorsTitle} >Recent Ads</h2>\r\n        <div className={styles.profiles}>\r\n            <div className={styles.cardHolder}>\r\n                {profiles.map((profile,i)=>(\r\n                    <UserCard profile={profile} key={i} index={i}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    </div>}\r\n    </React.Fragment>\r\n    \r\n    );\r\n};\r\n\r\nexport default TopTutors;",["306","307"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\connectPage\\connectPage.js",["308","309","310","311","312","313","314","315"],"import React,{useEffect, useState,useContext,useRef, useCallback} from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport axios from 'axios'\r\nimport Select from 'react-dropdown-select';\r\nimport {subjects} from '../../data/data'\r\nimport styles from './connectPage.module.scss';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {} from '@fortawesome/fontawesome-svg-core'\r\nimport UserCard from '../UserCard/userCard'\r\nimport {userContext} from '../../context/userContext'\r\nimport { faFilter, faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Loader from \"../Loader/loader\";\r\nimport { Redirect, useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst ConnectPage=() => {\r\n    const pageSize=5;\r\n    const history=useHistory();\r\n    const [refresh,setRefresh]=useState(true);\r\n    const [isLoading,setIsLoading]=useState(true);\r\n    const [hasMore,setHasMore]=useState(true);\r\n    const [pageNumber,setPageNumber]=useState(1);\r\n    const [profiles,setProfiles]=useState([]);\r\n    const [feeModeFilter,setFeeModeFilter]=useState('allfees');\r\n    const [minimumFees,setMinimumFees]=useState(0);\r\n    const [maximumFees,setMaximumFees]=useState(500000);\r\n    const {setBannerMsg,user,userLoaded,setAlertMsg}=useContext(userContext);\r\n    const location=useLocation();\r\n    const [data,setData]=useState({\r\n        feesPeriod:'allfees',\r\n        pincodes:[],\r\n        minimumFees:0,\r\n        maximumFees:500000,\r\n        subjects:[],\r\n        pageNumber:1,\r\n        pageSize:pageSize\r\n    })\r\n    const [subjectList, setSubjectList]=useState(()=>{\r\n        if(location.state){\r\n            if(location.state.subjectList){\r\n                return location.state.subjectList;\r\n            }\r\n        }\r\n        return [];\r\n    });\r\n    const[nearAroundLocations,setNearAroundLocations]=useState([]);\r\n    const [areLocationsLoading,setAreLocationsLoading]=useState(false);\r\n    const [isFilterMenuOpen,setIsFilterMenuOpen]=useState(false);\r\n    const [pincode,setPincode]=useState(()=>{\r\n        if(location.state){\r\n            if(location.state.pincode){\r\n                return location.state.pincode;\r\n            }\r\n        }\r\n        return\r\n    });\r\n    useEffect(()=>{\r\n        if(refresh){\r\n            setPageNumber(1);\r\n        }\r\n    },[refresh])\r\n    useEffect(()=>{\r\n        window.scroll(0,0)\r\n    },[]);\r\n    useEffect(()=>{\r\n        if(userLoaded&&!user){\r\n            setAlertMsg({message:'kindly login to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname}\r\n            })\r\n        }\r\n        \r\n        else if(userLoaded&&(user.accountType==='teacher')&&(!user.isVerified)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'tutorVerifyEmailForm'}\r\n            })\r\n        }\r\n        else if(userLoaded&&(user.accountType==='teacher')&&(!user.isStepOneDone)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'tutorInfoForm'}\r\n            })\r\n        }\r\n\r\n        else if(userLoaded&&(user.accountType==='teacher')&&(!user.isStepTwoDone)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'tutorFeeDetailForm'}\r\n            })\r\n        }\r\n        \r\n        else if(userLoaded&&(user.accountType==='student')&&(!user.isVerified)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'studentVerifyEmailForm'}\r\n            })\r\n        }\r\n        else if(userLoaded&&(user.accountType==='student')&&(!user.isStepOneDone)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'studentInfoForm'}\r\n            })\r\n        }\r\n        \r\n    },[user,userLoaded])\r\n    useEffect(()=>{\r\n        const fetchTeachers=async ()=>{\r\n            setIsLoading(true)\r\n            try{\r\n                const res= await axios.post(`/api/teachers/`,data);\r\n                if(!res.data.error){\r\n                    setHasMore(res.data.result.length===pageSize)\r\n                    if(refresh){\r\n                        setProfiles(res.data.result);\r\n                    }\r\n                    else{\r\n                        setProfiles(prev=>prev.concat(res.data.result));\r\n                    }\r\n                }\r\n            }\r\n            catch(err){\r\n                setBannerMsg({message:`Something went wrong!`});\r\n                setIsLoading(false)\r\n            }\r\n            finally{\r\n                setIsLoading(false)\r\n            }\r\n                \r\n        }\r\n\r\n        const fetchStudents=async ()=>{\r\n            setIsLoading(true);\r\n\r\n            try{\r\n\r\n                const res= await axios.post(`/api/students/`,data);\r\n                if(!res.data.error){\r\n                    setHasMore(res.data.result.length===pageSize)\r\n                    if(refresh){\r\n                        setProfiles(res.data.result);\r\n                    }\r\n                    else{\r\n                        setProfiles(prev=>prev.concat(res.data.result));\r\n                    }\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                setBannerMsg({message:`Something went wrong!`});\r\n                setIsLoading(false)\r\n            }\r\n            finally{\r\n                setIsLoading(false)\r\n            }\r\n                \r\n        }\r\n        if(user&&user.isStepOneDone&&user.isVerified){\r\n            if(user.accountType==='teacher'){\r\n                fetchStudents();\r\n            }else{\r\n                fetchTeachers();\r\n            }\r\n        }\r\n        \r\n    },[data,user]);\r\n    useEffect(()=>{\r\n        let pincodes=pincode;\r\n        if(pincode){\r\n            pincodes=[pincode,pincode+1,pincode-1]\r\n        }else{\r\n            pincodes=[];\r\n        }\r\n        setData({\r\n            feesPeriod:feeModeFilter,\r\n            pincodes:pincodes,\r\n            minimumFees,\r\n            maximumFees,\r\n            subjects:subjectList,\r\n            pageNumber,\r\n            pageSize:pageSize\r\n        })\r\n    },[feeModeFilter,pincode,minimumFees,maximumFees,subjectList,setData,pageNumber]);\r\n    const changePageNumber=()=>{\r\n        setRefresh(false);\r\n        setPageNumber(prev=>prev+1);\r\n    }\r\n    const changeFeeModeFilter=(e)=>{\r\n        setFeeModeFilter(e.target.value);\r\n        setRefresh(true);\r\n    }\r\n\r\n    const changeMinimumFees=(e)=>{\r\n        setRefresh(true);\r\n        if(!e.target.value){\r\n            setMinimumFees(0)\r\n        }\r\n        else{\r\n            setMinimumFees(e.target.value)\r\n        }\r\n    }\r\n\r\n    const changeMaximumFees=(e)=>{\r\n        setRefresh(true);\r\n        if(!e.target.value){\r\n            setMaximumFees(500000)\r\n        }\r\n        else{\r\n            setMaximumFees(e.target.value)\r\n        } \r\n    }\r\n\r\n    const pincodeChangeHandler=(e)=>{\r\n        setNearAroundLocations([]);\r\n        setRefresh(true);\r\n        setPincode(parseInt(e.target.value));\r\n        if(e.target.value.length===6){\r\n            let pin=parseInt(e.target.value)\r\n            setAreLocationsLoading(true)\r\n            const targetPins=[pin,pin+1,pin-1,pin+2,pin-2]\r\n            targetPins.forEach((pin)=>{\r\n                axios.get(`https://api.postalpincode.in/pincode/${pin}`)\r\n                .then(res=>{\r\n                    if(res.data[0].Status===\"Success\"){\r\n                        res.data[0].PostOffice.forEach((location,i)=>{\r\n                            setNearAroundLocations(prev=>[...prev,{id:(prev.length+1),name:location.Name}])\r\n                        })\r\n                    }\r\n                    setAreLocationsLoading(false)\r\n                })\r\n                .catch(\r\n                    err=>\r\n                    {\r\n                        console.log(err)\r\n                        setBannerMsg({message:`Something went wrong!`});\r\n                    }\r\n                )\r\n            })\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    const showFilterMenu=()=>{\r\n        setIsFilterMenuOpen(true)\r\n    }\r\n\r\n    const hideFilterMenu=()=>{\r\n        setIsFilterMenuOpen(false)\r\n    }\r\n\r\n    const onSubjectChange=(subjects)=>{\r\n        setRefresh(true);\r\n        setSubjectList(subjects);\r\n    }\r\n    if(user)\r\n    {\r\n        return (\r\n            <React.Fragment>\r\n                {user.accountType==='student'?\r\n                <Helmet>\r\n                    <title>Find best tutor near you and online | Modern Kaksha</title>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Find tutor near you. We at Modern Kaksha have tutors not only for subjects like Mathematics, Economics, Physics, Chemistry, Biology, Science, Social Studies, Hindi, English but also for extracurricular activities and sports.\"\r\n                    />\r\n                </Helmet>\r\n                :\r\n                <Helmet>\r\n                    <title>Teach students near you and online | Modern Kaksha</title>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Find students near you to teach. We at Modern Kaksha require tutors not only for subjects like Mathematics, Economics, Physics, Chemistry, Biology, Science, Social Studies, Hindi, English but also for extra extracurricular and sports.\"\r\n                    />\r\n                </Helmet>\r\n                }\r\n                <div className={styles.connectPage} >\r\n                    <h2>Connect</h2>\r\n                    \r\n                    <div className={styles.container}>\r\n                        {!isLoading?\r\n                            (   \r\n                                profiles.length>0?\r\n                                <div className={styles.cardHolder}>\r\n                                    {profiles.map((profile,i)=>(\r\n                                        <UserCard profile={profile} key={i} index={i} />\r\n                                    ))}  \r\n                                </div>\r\n                                :\r\n                                <div className={styles.notFoundMsgHolder}>\r\n                                    <div className={styles.notFoundMsg}>No profiles matching your requirements found.</div>\r\n                                </div>\r\n                            )\r\n                            :\r\n                            (\r\n                                <div className={styles.cardHolder}></div>\r\n                            )\r\n                        }\r\n                        <div className={isFilterMenuOpen?`${styles.filterHolder} ${styles.showFilters}`:`${styles.filterHolder}  ${styles.hideFilters}` }>\r\n                            <div className={styles.filterTopBar}><span className={styles.emptySpan}></span><span className={styles.filterHeading}><FontAwesomeIcon icon={faFilter}/>Filter</span><span className={styles.crossSign} onClick={hideFilterMenu}><FontAwesomeIcon icon={faPlus}/></span></div>\r\n                            <div className={styles.filterSection}>\r\n                            { user.accountType==='student'&&\r\n                                <>\r\n                                    <div className={styles.filterSecHead}>Filter by fees</div>\r\n                                    <div className={styles.inputHolder}>\r\n                                        {/* <div><input type=\"radio\" name=\"feesType\" value='allfees' id='allfees' checked={feeModeFilter==='allfees'} onChange={changeFeeModeFilter}/><label htmlFor='allfees'>All</label></div>\r\n                                        <div><input type=\"radio\" name=\"feesType\" value='hourly' id='hourly' checked={feeModeFilter==='hourly'} onChange={changeFeeModeFilter}/><label htmlFor='hourly'>Hourly fees</label></div>\r\n                                        <div><input type=\"radio\" name=\"feesType\" value='daily' id='daily' checked={feeModeFilter==='daily'} onChange={changeFeeModeFilter}/><label htmlFor='daily'>Daily fees</label></div>\r\n                                        <div><input type=\"radio\" name=\"feesType\" value='monthly' id='monthly' checked={feeModeFilter==='monthly'} onChange={changeFeeModeFilter}/><label htmlFor='monthly'>Monthly fees</label></div> */}\r\n                                        <div className={styles.feeRangeHolder}>\r\n                                            <div className={styles.minfeesHolder}>\r\n                                                <input type='number' name='minFees'placeholder='Minimum' onChange={changeMinimumFees}/>\r\n                                                </div>\r\n                                            <div>To</div>\r\n                                            <div className={styles.maxfeesHolder}>\r\n                                                <input type='number' name='maxFees' placeholder='Maximum' onChange={changeMaximumFees}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                                \r\n                            </div>\r\n                            <div className={styles.filterSection}>\r\n                                <div className={styles.filterSecHead}>Filter by subject</div>\r\n                                <div className={styles.dropDownHolder}>\r\n                                    <Select\r\n                                        multi\r\n                                        create\r\n                                        options={subjects}\r\n                                        onChange={onSubjectChange}\r\n                                        color=\"#2876A0\"\r\n                                        labelField='value'\r\n                                        sortBy='value'\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.filterSection}>\r\n                                <div className={styles.filterSecHead}>Filter by location</div>\r\n                                <div className={styles.pincodeInputHolder}>\r\n                                    <input \r\n                                    type='number' \r\n                                    name='pincode' \r\n                                    id='pincode' \r\n                                    placeholder='Pincode'\r\n                                    value={pincode || \"\"}\r\n                                    onChange={pincodeChangeHandler}\r\n                                    />\r\n                                    </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {(hasMore&&!isLoading)&&\r\n                        <div className={styles.loadMoreBtn} onClick={changePageNumber}>\r\n                            <div >Load More</div>\r\n                        </div>\r\n                    } \r\n                    {(isLoading)&&\r\n                        <div className={styles.loadMoreBtn}>\r\n                            <div >Loading...</div>\r\n                        </div>\r\n                    } \r\n                    <div className={styles.filterBar} onClick={showFilterMenu}><FontAwesomeIcon  icon={faFilter}/>Filter</div>\r\n                </div>\r\n            </React.Fragment>\r\n            \r\n        );\r\n    }else{\r\n        return (\r\n        <div className={styles.connectPage} >\r\n            <Loader/>\r\n        </div>)\r\n    }\r\n};\r\nexport default ConnectPage;","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\UserCard\\userCard.js",["316","317","318"],"import React,{useEffect,useContext, useState} from \"react\";\r\nimport axios from 'axios';\r\nimport styles from './userCard.module.scss';\r\nimport Aos from 'aos';\r\nimport 'aos/dist/aos.css'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMapMarkerAlt, faRupeeSign } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {userContext} from '../../context/userContext';\r\nimport placeHolderImg from '../../resources/images/profile-pic-placeholder.png';\r\nconst UserCard=({profile,subject}) => {\r\n    const {user,setUser,setAlertMsg}=useContext(userContext);\r\n    const [isConnecting,setIsConnecting]=useState(false);\r\n    const [connectionSuccess,setConnectionSuccess]=useState(false);\r\n    const [targetUserId,setTargetUserId]=useState();\r\n    const history=useHistory();\r\n\r\n\r\n    useEffect(()=>{\r\n        if(connectionSuccess&&targetUserId){\r\n            history.push({\r\n                pathname:`profile/${targetUserId}`\r\n            })\r\n        }\r\n    },[connectionSuccess,targetUserId]);\r\n\r\n    useEffect(()=>{\r\n        Aos.init({duration:2000})\r\n    },[])\r\n\r\n    const handleConnect=async (profileId)=>{\r\n        setIsConnecting(true)\r\n        setTargetUserId(profileId);\r\n        let idMatch=user.connections.some((connection)=>{\r\n            return connection===profileId\r\n        })\r\n        if(idMatch){\r\n            setAlertMsg({message:'You are already connected to this user'});\r\n            setConnectionSuccess(true);\r\n        }else{\r\n            let confirmation=window.confirm('Do you want to use 1 credit to connect?')\r\n            if(confirmation){\r\n                if(user.connectsLeft>0){\r\n                    const config = {\r\n                        headers: {\r\n                            'x-auth-token':localStorage.getItem(\"token\")\r\n                        }\r\n                    };\r\n                    let res=await axios.post(`/api/connects/redeem`,{targetUserId:profileId},config);\r\n                    if(res.data.error){\r\n                        setAlertMsg({message:res.data.error})\r\n                    }else{\r\n                        setConnectionSuccess(true);\r\n                        if(user.connectsLeft!=='Unlimted'){\r\n                            setUser({...user,connectsLeft:user.connectsLeft-1,connections:[...user.connections,profileId]});\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    setAlertMsg({message:'You dont have enough credits. Kindly buy more credits to contiue'});\r\n                }   \r\n            }\r\n        }\r\n        setIsConnecting(false);\r\n    }      \r\n\r\n    return (\r\n    <React.Fragment>\r\n        <div className={styles.card} data-aos='zoom-in'>\r\n            {profile.classGroups&&\r\n                <div  className={styles.classesHolder}>\r\n                    {\r\n                        profile.classGroups.map(classGroup=>(\r\n                            <div>{classGroup.value}</div>\r\n                        ))\r\n                    }\r\n                    \r\n                </div>\r\n            }\r\n            {profile.classOfStudy&&\r\n                <div className={styles.classesHolder}>\r\n                   <div>{ profile.classOfStudy.value}</div>\r\n                </div>\r\n            }\r\n            {\r\n            profile.profilePicture!=='undefined'?\r\n                <div className={styles.profilePicHolder}><img src={`http://modernkaksha.com/api/uploads/profilePictures/${profile.profilePicture}`}/></div>\r\n            :\r\n                <div className={styles.profilePicHolder}><img src={placeHolderImg}/></div>\r\n            }\r\n            <div className={styles.profileName}>{profile.name.split(' ')[0]} {profile.name.split(' ')[1]}</div>\r\n            {profile.district&&<div className={styles.profileLocation}><FontAwesomeIcon icon={faMapMarkerAlt}/>{profile.district.split(',')[0]||''}</div>}\r\n            <div className={styles.discriptionBox}>\r\n                    {profile.discription}\r\n            </div>\r\n            <div className={styles.skillsSection}>\r\n                {/* {profile.subjects.map((skill,j)=>( */}\r\n                    <div className={styles.profileSkill}>{profile.subject.value}</div>\r\n                {/* ))} */}\r\n            </div>\r\n            \r\n\r\n            {\r\n                user?\r\n                    profile.isAdActive?\r\n                        isConnecting?\r\n                            <div className={styles.hireBtnDisabled} >Connecting...</div>\r\n                            : \r\n                            <div className={styles.hireBtn} onClick={()=>handleConnect(profile.ownerId)}>Connect</div>\r\n                        :\r\n                        <div className={`${styles.hireBtn} ${styles.disabledHireBtn}`}>Requirement Fulfilled</div>\r\n                :\r\n                <Link className={styles.hireBtn} \r\n                    to={\r\n                        {\r\n                            pathname:`/auth`,\r\n                            state:{\r\n                                formType:'studentLogin'\r\n                            }\r\n                        }\r\n                    }\r\n                >Connect</Link>\r\n            }\r\n            {profile.teachingMode!=='online'&&<div className={styles.locationsSection}>\r\n                {profile.teachingLocation&&\r\n                    profile.teachingLocation.map((location,j)=>(\r\n                    <div key={j} className={styles.location}><FontAwesomeIcon icon={faMapMarkerAlt}/>{location.value}</div>\r\n                ))}\r\n            </div>}\r\n            {(profile.teachingMode==='online'||profile.studyingMode===\"online\")&&<div className={styles.locationsSection}>\r\n                <div  className={styles.location}><FontAwesomeIcon icon={faMapMarkerAlt}/>Online</div>\r\n            </div>}\r\n            \r\n            {profile.feeAmount&&\r\n                <div className={styles.feesAmountHolder}>\r\n                    <div><FontAwesomeIcon icon={faRupeeSign}/>{profile.feeAmount}/Class</div>\r\n                </div>\r\n            }\r\n            \r\n        </div>\r\n    </React.Fragment>\r\n    \r\n    );\r\n};\r\nexport default UserCard;","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\choosePlanPage\\choosePlanPage.js",["319","320","321"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {Helmet} from \"react-helmet\";\r\nimport  axios from 'axios';\r\nimport styles from './choosePlanPage.module.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faRupeeSign} from '@fortawesome/free-solid-svg-icons';\r\nimport {userContext} from '../../context/userContext'\r\nimport logo from '../../resources/images/logo2.png'\r\nimport { Redirect, useHistory, useLocation } from 'react-router-dom';\r\nimport PaymentSuccessPage from '../PaymentSuccessPage/paymentSuccessPage'\r\nimport Loader from '../Loader/loader';\r\n\r\nconst ChoosePlanPage=()=>{\r\n    const history=useHistory();\r\n    const location=useLocation();\r\n    const [data,setData]=useState();\r\n    const {user,userLoaded,setBannerMsg,setAlertMsg,setUser}=useContext(userContext);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const [orderSuccess,setOrderSuccess]=useState(false);\r\n    const [paymentId,setPaymentId]=useState();\r\n    const selectPlan=(connects,planName,duration,price)=>{\r\n            setIsLoading(true);\r\n            setData({\r\n            connects,\r\n            planName,\r\n            duration,\r\n            price,\r\n            expiry:(new Date(new Date().getFullYear(),new Date().getMonth() +duration, new Date().getDate())),\r\n            userId:user._id\r\n        });\r\n    }\r\n    useEffect(()=>{\r\n        if(userLoaded&&!user){\r\n            setAlertMsg({message:'Kindly login to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname}\r\n            })\r\n        }\r\n        else if(userLoaded&&(user.accountType==='teacher')&&(!user.isVerified)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'tutorVerifyEmailForm'}\r\n            })\r\n        }\r\n        else if(userLoaded&&(user.accountType==='teacher')&&(!user.isStepOneDone)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'tutorInfoForm'}\r\n            })\r\n        }\r\n\r\n        else if(userLoaded&&(user.accountType==='teacher')&&(!user.isStepTwoDone)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'tutorFeeDetailForm'}\r\n            })\r\n        }\r\n        \r\n        else if(userLoaded&&(user.accountType==='student')&&(!user.isVerified)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'studentVerifyEmailForm'}\r\n            })\r\n        }\r\n        else if(userLoaded&&(user.accountType==='student')&&(!user.isStepOneDone)){\r\n            setAlertMsg({message:'kindly complete registeration to continue'})\r\n            history.push({\r\n                pathname:'/auth',\r\n                state:{backUrl:location.pathname,formType:'studentInfoForm'}\r\n            })\r\n        }\r\n    },[userLoaded,user])\r\n    useEffect(()=>{\r\n        const processPayment=async()=>{\r\n            try{\r\n                let res=await axios.post(`/api/orders`,{price:data.price},{headers:{'x-auth-token':localStorage.getItem(\"token\")}});\r\n                if(!res.status===200){\r\n                    console.log('Something went wrong');\r\n                    setBannerMsg({message:`Something went wrong!`});\r\n                }\r\n                console.log(res.data.order.id);\r\n                let options = {\r\n                    \"key\": process.env.REACT_APP_RAZORPAY_KEY,\r\n                    \"amount\": res.data.order.amount*100,\r\n                    \"currency\": \"INR\",\r\n                    \"name\": 'Modern Kaksha',\r\n                    'image':{logo},\r\n                    \"description\":`${data.planName} Pack`,\r\n                    \"order_id\": res.data.order.id,\r\n                    \"handler\": async (response)=> {\r\n                        const orderDetails = {\r\n                            orderCreationId:res.data.order.id,\r\n                            razorpayPaymentId: response.razorpay_payment_id,\r\n                            razorpayOrderId: response.razorpay_order_id,\r\n                            razorpaySignature: response.razorpay_signature,\r\n                            ...data\r\n                        };\r\n                        let body=document.querySelector('body');\r\n                        body.style={overflow:'scroll'};\r\n                        let result=await axios.post(`/api/orders/success`,orderDetails,{headers:{'x-auth-token':localStorage.getItem(\"token\")}});     \r\n                        if(result.status!==200){\r\n                            console.log(result.data.error);\r\n                        }\r\n                        setPaymentId(response.razorpay_payment_id);\r\n                        if(data.connects>=9999999){\r\n                            setUser({...user,connectsLeft:'Unlimited'})\r\n                        }\r\n                        else{\r\n                            setUser({...user,connectsLeft:parseInt(user.connectsLeft)+parseInt(data.connects)})\r\n                        }\r\n                        \r\n                        setIsLoading(false);\r\n                        setOrderSuccess(true);\r\n                    },\r\n                    \"prefill\": {\r\n                        \"name\": `${user.name}`,\r\n                        \"email\": `${user.email}`,\r\n                        \"contact\": `${user.contactNumber}`\r\n                    },\r\n                    \"theme\": {\r\n                        \"color\": \"#2876A0\"\r\n                    },\r\n                    \"modal\": {\r\n                        \"ondismiss\": function(){\r\n                            let body=document.querySelector('body');\r\n                            body.style={overflow:'scroll'};\r\n                            setIsLoading(false);\r\n                        }\r\n                    }\r\n                };\r\n                try{\r\n                    let razorpayWindow = new window.Razorpay(options);\r\n                    razorpayWindow.open();\r\n                }\r\n                catch(err){\r\n                    console.log(err);\r\n                    setBannerMsg({message:`Something went wrong!`});\r\n                }\r\n                finally{\r\n                    setIsLoading(false)\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                setBannerMsg({message:`Something went wrong!`});\r\n            }\r\n            finally{\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        if(data){\r\n            processPayment();\r\n        }\r\n    },[data])\r\n    \r\n    if(!userLoaded){\r\n        return <div className={styles.choosePlanPage}>\r\n                <Helmet>\r\n                    <title>Buy Connects | Choose Plan | Modern Kaksha</title>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Buy Delta Eductors Connects. Start Connecting with tutors and students from all over the India and near you. Start teaching at your ease, near you or online. \"\r\n                    />\r\n                </Helmet>\r\n                <Loader/>\r\n            </div>\r\n    }\r\n    if(orderSuccess){\r\n        return <PaymentSuccessPage paymentId={paymentId}/>\r\n    }\r\n    return(\r\n        <React.Fragment>\r\n            <Helmet>\r\n                <title>Buy Connects | Modern Kaksha</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Buy Delta Eductors Connects. Start Connecting with tutors and students from all over the India and near you. Start teaching at your ease, near you or online. \"\r\n                />\r\n            </Helmet>\r\n            <div className={styles.choosePlanPage}>\r\n                <div className={styles.imageContainer}></div>\r\n                <div className={styles.headingHolder}><h2>Choose Your Plan</h2></div>\r\n                <div className={styles.planCardHolder}>\r\n                    <div className={`${styles.planCard} ${styles.silverCard}`}>\r\n                        <div className={styles.topSec}>Silver</div>\r\n                        <div className={styles.bottomSec}>\r\n                            <div className={styles.priceContainer}><FontAwesomeIcon icon={faRupeeSign}/>250</div>\r\n                            <div className={styles.specsContainer}>\r\n                                <div className={styles.spec}><span className={styles.specValue}>10</span><span className={styles.specName}>Connects</span></div>\r\n                                <div className={styles.spec}><span className={styles.specValue}>3</span><span className={styles.specName}>Months</span></div>\r\n                            </div>\r\n                            <div className={styles.selectBtn}>{!isLoading?<div onClick={()=>{selectPlan(10,'Silver',3,250)}}>Select</div>:<div className={styles.btnDisabled}>Loading...</div>}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={`${styles.planCard} ${styles.goldCard}`}>\r\n                        <div className={styles.topSec}>Gold</div>\r\n                        <div className={styles.bottomSec}>\r\n                            <div className={styles.priceContainer}><FontAwesomeIcon icon={faRupeeSign}/>500</div>\r\n                            <div className={styles.specsContainer}>\r\n                                <div className={styles.spec}><span className={styles.specValue}>22</span><span className={styles.specName}>Connects</span></div>\r\n                                <div className={styles.spec}><span className={styles.specValue}>5</span><span className={styles.specName}>Months</span></div>\r\n                            </div>\r\n                            <div className={styles.selectBtn}>{!isLoading?<div onClick={()=>{selectPlan(22,'Gold',5,500)}}>Select</div>:<div className={styles.btnDisabled}>Loading...</div>}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={`${styles.planCard} ${styles.platinumCard}`}>\r\n                        <div className={styles.topSec}>Platinum</div>\r\n                        <div className={styles.bottomSec}>\r\n                            <div className={styles.priceContainer}><FontAwesomeIcon icon={faRupeeSign}/>1500</div>\r\n                            <div className={styles.specsContainer}>\r\n                                <div className={styles.spec}><span className={styles.specValue}>Unlimited</span><span className={styles.specName}>Connects</span></div>\r\n                                <div className={styles.spec}><span className={styles.specValue}>3</span><span className={styles.specName}>Months</span></div>\r\n                            </div>\r\n                            <div className={styles.selectBtn}>{!isLoading?<div onClick={()=>{selectPlan(9999999,'Platinum',3,1500)}}>Select</div>:<div className={styles.btnDisabled}>Loading...</div>}</div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className={`${styles.planCard} ${styles.platinumCard}`}>\r\n                        <div className={styles.topSec}>Platinum +</div>\r\n                        <div className={styles.bottomSec}>\r\n                            <div className={styles.priceContainer}><FontAwesomeIcon icon={faRupeeSign}/>2000</div>\r\n                            <div className={styles.specsContainer}>\r\n                                <div className={styles.spec}><span className={styles.specValue}>Unlimited</span><span className={styles.specName}>Connects</span></div>\r\n                                <div className={styles.spec}><span className={styles.specValue}>6</span><span className={styles.specName}>Months</span></div>\r\n                            </div>\r\n                            <div className={styles.selectBtn}>{!isLoading?<div onClick={()=>{selectPlan(9999999,'Platinum+ ',6,2000)}}>Select</div>:<div className={styles.btnDisabled}>Loading...</div>}</div>\r\n                        </div>\r\n                    </div> */}\r\n                    {/* <div className={`${styles.planCard} ${styles.platinumCard}`}>\r\n                        <div className={styles.topSec}>Platinum ++</div>\r\n                        <div className={styles.bottomSec}>\r\n                            <div className={styles.priceContainer}><FontAwesomeIcon icon={faRupeeSign}/>3500</div>\r\n                            <div className={styles.specsContainer}>\r\n                                <div className={styles.spec}><span className={styles.specValue}>Unlimited</span><span className={styles.specName}>Connects</span></div>\r\n                                <div className={styles.spec}><span className={styles.specValue}>12</span><span className={styles.specName}>Months</span></div>\r\n                            </div>\r\n                            <div className={styles.selectBtn}>{!isLoading?<div onClick={()=>{selectPlan(9999999,'Platinum++',12,3500)}}>Select</div>:<div className={styles.btnDisabled}>Loading...</div>}</div>\r\n                        </div>\r\n                    </div> */}\r\n                    <div className={`${styles.planCard} ${styles.perlCard}`}>\r\n                        <div className={styles.topSec}>Perl</div>\r\n                        <div className={styles.bottomSec}>\r\n                            <div className={styles.priceContainer}>__</div>\r\n                            <div className={styles.specsContainer}>\r\n                                <div className={styles.spec}><span className={styles.specValue}>__</span><span className={styles.specName}>Connects</span></div>\r\n                                <div className={styles.spec}><span className={styles.specValue}>__</span><span className={styles.specName}>Months</span></div>\r\n                            </div>\r\n                            <div className={styles.selectBtn}><div>Select</div></div>\r\n                        </div>\r\n                        <div className={styles.blurCard}><div>Coming Soon</div></div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ChoosePlanPage;","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AuthPage\\authPage.js",["322"],"import {Helmet} from \"react-helmet\";\r\nimport React from \"react\";\r\nimport AuthForm from '../AuthForm/authForm'\r\n\r\nexport default ()=> {\r\n  return (\r\n    <div >\r\n      <Helmet>\r\n          <title>Register with Modern Kaksha | Login to your account|Modern Kaksha</title>\r\n          <meta\r\n              name=\"description\"\r\n              content=\"Register with Modern Kaksha to find quality teachers near you. Or start teaching with us, near you at your convinience. Sign up today or Login to your account. \"\r\n          />\r\n      </Helmet>\r\n      <AuthForm/>\r\n    </div>\r\n  );\r\n}\r\n","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\tutorFeeDetailFormValidationRules.js",["323"],"export default (values,touched)=> {\r\n    let errors = {};\r\n    \r\n    if(touched.feeAmount){\r\n      if (!values.feeAmount) {\r\n        errors.feeAmount= 'Fee Amount is required';\r\n      } \r\n    }\r\n    if(touched.accountNumber){\r\n      if (!values.accountNumber) {\r\n        errors.accountNumber= 'Account Number is required';\r\n      }  else if (!/^\\d{9,18}$/.test(values.accountNumber)) {\r\n        errors.accountNumber = 'Account Number is invalid';\r\n      }\r\n    }\r\n    if(touched.confirmAccountNumber){\r\n      if (!values.confirmAccountNumber) {\r\n        errors.confirmAccountNumber= 'Account Number is required';\r\n      }  \r\n      else if (values.confirmAccountNumber!==values.accountNumber){\r\n        errors.confirmAccountNumber = 'Account Numbers do not match';\r\n      }\r\n      else if (!/^\\d{9,18}$/.test(values.confirmAccountNumber)) {\r\n        errors.confirmAccountNumber = 'Account Number is invalid';\r\n      }\r\n      \r\n    }\r\n    if(touched.ifscCode){\r\n      if (!values.ifscCode) {\r\n        errors.ifscCode= 'IFSC code is required';\r\n      }  else if (!/^[A-Z]{4}0[A-Z0-9]{6}$/.test(values.ifscCode)) {\r\n        errors.ifscCode = 'IFSC code is invalid';\r\n      }\r\n    }\r\n    if(touched.accountHolder){\r\n      if (!values.accountHolder) {\r\n        errors.accountHolder = 'Account holder\\'s name is required';\r\n      } else if (!/^([a-z']+( )?)+$/i.test(values.accountHolder)) {\r\n        errors.accountHolder = 'Account holder\\'s name can only contain alphabets and space';\r\n      }\r\n    }\r\n    return errors;\r\n  };\r\n  ",["324","325"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\validationRules\\tutorInfoFormValidationRules.js",["326"],"export default (values,touched)=> {\r\n    let errors = {};\r\n    if(touched.aadhar){\r\n      if(values.aadhar){\r\n        if (!/^[2-9]{1}[0-9]{11}$/.test(values.aadhar)) {\r\n          errors.aadhar = 'Aadhar number is invalid';\r\n        }\r\n      } \r\n    }\r\n    if(touched.pincode){\r\n      if (!values.pincode) {\r\n        errors.pincode= 'Pincode is required';\r\n      }  else if (!/^[1-8]{1}[0-9]{5}$/.test(values.pincode)) {\r\n        errors.pincode = 'Pincode is invalid';\r\n      }\r\n    }\r\n    if(touched.discription){\r\n      if (values.discription) {\r\n        if (values.discription.length>150) {\r\n          errors.discription = 'discription should not exceed 150 letters';\r\n        }\r\n      } \r\n    }\r\n    if(touched.instituteName){\r\n      if (!values.instituteName) {\r\n        errors.instituteName = 'Intitute name is required';\r\n      } else if (!/^([a-z']+( )?)+$/i.test(values.instituteName)) {\r\n        errors.instituteName = 'Institute name can only contain alphabets and space';\r\n      }\r\n    }\r\n    if(touched.address){\r\n      if (!values.address) {\r\n        errors.address = 'Address is required';\r\n      } \r\n    }\r\n\r\n    return errors;\r\n  };\r\n  ","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Slidder\\slidder.js",["327","328","329"],"import React,{useContext} from \"react\";\r\nimport {motion} from 'framer-motion'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDoubleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport {Link} from 'react-scroll';\r\nimport styles from './slidder.module.scss';\r\nimport sliderImg from '../../resources/images/teacher-bg-1.jpg';\r\nimport mobileBg from '../../resources/images/mobile-bg.jpg';\r\nimport {userContext }from '../../context/userContext'\r\n\r\nexport default () => {\r\n  const {user}=useContext(userContext)\r\n  return (\r\n    <React.Fragment>\r\n      \r\n      <div className={styles.sliderContainer}>\r\n          <img className={styles.background} src={sliderImg}/>\r\n          <img className={styles.mobileBackground} src={mobileBg}/>\r\n          <div className={styles.sliderContent}>\r\n            <motion.h1 className={styles.tagline} initial={{opacity:0,x:-50}} animate={{opacity:1, x:0}} transition={{duration:1}}>Learn Anything</motion.h1>\r\n            {/* <motion.h3 className={styles.leadText}  initial={{opacity:0}} animate={{opacity:1}} transition={{duration:2}}>With a new and unique way to find a tutor</motion.h3> */}\r\n            <div className={styles.downIcon}>\r\n                {!user&&\r\n                  <Link to=\"signinSection\" smooth={true} duration={1000}>\r\n                      <FontAwesomeIcon icon={faAngleDoubleDown} className={styles.arrow}/>\r\n                  </Link>\r\n                }\r\n            </div>\r\n          </div>\r\n      </div>\r\n    </React.Fragment>\r\n    \r\n  );\r\n};\r\n","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\SubjectsCarousel\\subjectsCarousel.js",["330","331"],"import React,{useEffect,useRef,useState} from \"react\";\r\nimport styles from './subjectsCarousel.module.scss';\r\nimport Aos from 'aos';\r\nimport 'aos/dist/aos.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFlask,faCalculator,faGuitar,faArrowAltCircleLeft,faArrowAltCircleRight,faPalette, faFont, faBrain, faAngleRight, faAngleLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { subjects } from \"../../data/data\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport default () => {\r\n    const [subjectList,setSubjectList]=useState([]); \r\n    const cardHolder=useRef();\r\n    const handleClick=(title)=>{\r\n        setSubjectList([{value:title}]);\r\n    }\r\n    let cards=[\r\n        { \r\n            icon:faFlask,\r\n            title:'Science'},\r\n        { \r\n            icon:faCalculator,\r\n            title:'Mathematics'\r\n        },\r\n        { \r\n            icon:faGuitar,\r\n            title:'Guitar'\r\n        },\r\n        {\r\n            icon:faFont,\r\n            title:'English Speaking'\r\n        },\r\n        {\r\n            icon:faBrain,\r\n            title:'Psychology'\r\n        },\r\n        {\r\n            icon:faPalette,\r\n            title:'Art and Craft'\r\n        }\r\n    ]\r\n\r\n    const goRight=()=>{\r\n        cardHolder.current.scrollLeft+=300;\r\n    }\r\n    const goRightMobile=()=>{\r\n        cardHolder.current.scrollLeft+=265;\r\n    }\r\n    const goLeft=()=>{\r\n        cardHolder.current.scrollLeft-=300;\r\n    }\r\n    const goLeftMobile=()=>{\r\n        cardHolder.current.scrollLeft-=265;\r\n    }\r\n    useEffect(()=>{\r\n        Aos.init({duration:2000})\r\n      },[])\r\n    \r\n    if(subjectList.length>0){\r\n        return <Redirect to={{\r\n            pathname:'/connect',\r\n            state:{subjectList:subjectList}\r\n        }}/>\r\n    }\r\n    return (\r\n    <React.Fragment>\r\n    <div className={styles.quickLinks} id=\"quickLinks\"> \r\n        <h2 className={styles.quickLinksTitle} >Quick Links</h2>\r\n        <div className={styles.carousel}>\r\n        <div onClick={goLeft} className={styles.arrow}><FontAwesomeIcon icon={faArrowAltCircleLeft}/></div>\r\n        <div onClick={goLeftMobile} className={styles.arrowMobile}><FontAwesomeIcon icon={faAngleLeft}/></div>\r\n            <div className={styles.cardHolder} ref={cardHolder}>\r\n                {cards.map((card,i)=>(\r\n                    <div key ={i} className={styles.card} data-aos='fade-in' data-aos-delay={`${i*200}`} onClick={()=>handleClick(card.title)}>\r\n                        <div className={styles.cardIcon}><FontAwesomeIcon icon={card.icon}/></div>\r\n                        <div className={styles.cardTitle}>{card.title}</div>\r\n                    </div>\r\n                ))} \r\n            </div>\r\n            <div onClick={goRight} className={styles.arrow}><FontAwesomeIcon icon={faArrowAltCircleRight}/></div>\r\n            <div onClick={goRightMobile} className={styles.arrowMobile}><FontAwesomeIcon icon={faAngleRight}/></div>\r\n        </div>\r\n    </div>\r\n    </React.Fragment>\r\n    \r\n    );\r\n};\r\n",["332","333"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentInfoForm\\studentInfoForm.js",["334"],"import React,{useEffect, useState,useContext} from \"react\";\r\nimport {Redirect} from 'react-router-dom'\r\nimport axios from 'axios';\r\nimport { userContext } from \"../../context/userContext\";\r\nimport useForm from '../../hooks/useForm'\r\nimport validationRules from '../../validationRules/tutorInfoFormValidationRules'\r\nimport Select from 'react-dropdown-select';\r\nimport {motion} from 'framer-motion';\r\nimport {subjects,studentClasses} from '../../data/data'\r\nimport 'aos/dist/aos.css'\r\nimport styles from '../AuthForm/authForm.module.scss'\r\n\r\nconst TutorInfoForm= ({formType, setFormType,backUrl,isEditProfileForm})=> {\r\n    const [district,setDistrict]=useState();\r\n    const [state,setState]=useState();\r\n    const [studyingMode,setStudyingMode]=useState('online');\r\n    const [subjectList,setSubjectList]=useState([])\r\n    const [studentClass,setStudentClass]=useState();\r\n    const [localErrors,setLocalErrors]=useState({});\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const [isSubmited,setIsSubmited]=useState(false);\r\n    const [areLocationsLoading,setAreLocationsLoading]=useState(false);\r\n    const {setUser,setAlertMsg,userLoaded,user,setBannerMsg} = useContext(userContext);\r\n\r\n    const onStudentClassChange=(classes) =>{\r\n        setStudentClass(classes[0]);\r\n        setLocalErrors(prev=>({...prev,studentClassesDropdwn:''}))\r\n    }\r\n    const onSubjectChange=(subjects)=>{\r\n        setSubjectList(subjects);\r\n        setLocalErrors(prev=>({...prev,subjectDropdown:''}))\r\n    }\r\n    const pincodeChangeHandler=(e)=>{\r\n        handleChange(e);\r\n        if(e.target.value.length===6){\r\n            setAreLocationsLoading(true)\r\n            const targetPins=[parseInt(e.target.value)+1,parseInt(e.target.value),parseInt(e.target.value)-1]\r\n            targetPins.forEach((pin,i)=>{\r\n                axios.get(`https://api.postalpincode.in/pincode/${pin}`)\r\n                .then(res=>{\r\n                    if(res.data[0].Status===\"Success\"){\r\n                        setDistrict(`${res.data[0].PostOffice[0].Block},${res.data[0].PostOffice[0].District}`);\r\n                        setState(res.data[0].PostOffice[0].State)\r\n                    }\r\n                    else{\r\n                        if(i===1){\r\n                            setAlertMsg({message:`Invalid pincode ${pin}`});\r\n                        }\r\n                    }\r\n                    setAreLocationsLoading(false)\r\n                })\r\n                .catch(err=>console.log(err))\r\n            })\r\n            \r\n        }\r\n    }\r\n    const submitHandler = async () => {\r\n        \r\n        if(values.pincode.length===6){\r\n            setIsLoading(true);\r\n            const targetPins=[parseInt(values.pincode)+1,parseInt(values.pincode),parseInt(values.pincode)-1]\r\n            targetPins.forEach((pin,i)=>{\r\n                axios.get(`https://api.postalpincode.in/pincode/${pin}`)\r\n                .then(res=>{\r\n                    if(res.data[0].Status===\"Success\"){\r\n                        setDistrict(`${res.data[0].PostOffice[0].Block},${res.data[0].PostOffice[0].District}`);\r\n                        setState(res.data[0].PostOffice[0].State)\r\n                    }\r\n                    else{\r\n                        if(i===1){\r\n                            setAlertMsg({message:`Invalid pin ${pin}`});\r\n                            setLocalErrors(prev=>({...prev,pincode:'Invalid Pincode'}));\r\n                            return\r\n                        }\r\n                    }\r\n                })\r\n                .catch(err=>console.log(err))\r\n            })\r\n            setIsLoading(false);\r\n        }\r\n        if(subjectList.length===0){\r\n            setLocalErrors(prev=>({...prev,subjectDropdown:'Select atleast one subject'}));\r\n            return\r\n        }\r\n        if(!studentClass){\r\n            setLocalErrors(prev=>({...prev,studentClassesDropdwn:'Select your Class'}));\r\n            return\r\n        }\r\n        const data = {\r\n            _id:user._id,\r\n            studyingMode:studyingMode,\r\n            pincode:values.pincode,\r\n            subjects:subjectList,\r\n            discription:values.discription,\r\n            classOfStudy:studentClass,\r\n            isStepOneDone:true,\r\n            isActive:true,\r\n            district:district,\r\n            state:state\r\n        };\r\n        try{\r\n            setIsLoading(true);\r\n            const res = await axios.put(`/api/students/update`,data,{headers:{'x-auth-token':localStorage.getItem(\"token\")}});\r\n            if(!res.data.error){\r\n                setUser(res.data.result);\r\n                setIsSubmited(true);\r\n            }\r\n            else {\r\n                setAlertMsg({message:res.data.error});\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            setBannerMsg({message:`Something went wrong!`});\r\n        }\r\n        finally{\r\n            setIsLoading(false)\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n    const changeStudyingMode=(e)=>{\r\n        setStudyingMode(e.target.value);\r\n    }\r\n    const { values, errors, handleChange, handleSubmit,setValues} = useForm(\r\n        submitHandler,\r\n        validationRules\r\n    );\r\n    useEffect(()=>{\r\n        if(user&&isEditProfileForm){\r\n            setValues({...user})\r\n            setStudentClass(user.classOfStudy);\r\n            setSubjectList(user.subjects);\r\n            setStudyingMode(user.studyingMode);\r\n        }\r\n    },[setValues,user,isEditProfileForm])\r\n    if(isSubmited&&!isLoading){\r\n        if(!isEditProfileForm){\r\n            alert(`Thank You for completing your registration. As a token of gratitude we are giving you 5 free credits and we have posted a free ad for you.`)\r\n        }\r\n        return(<Redirect to={backUrl||'/connect'}/>)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n                <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit}>\r\n                    <h3>{isEditProfileForm?`Edit Profile`:`Few more steps`}</h3>\r\n                    <div className={styles.inputContainer}>\r\n        {/*======================== Studying place  radio buttons===========================*/}\r\n                        <div className={styles.radioLabelHolder}><label htmlFor='studyingLocation'>Where would you like to study?</label></div>\r\n                        <div className={styles.radioBtnHolder}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"studyingLocation\"\r\n                                id=\"online\"\r\n                                value=\"online\"\r\n                                checked={studyingMode==='online'}\r\n                                onChange={changeStudyingMode}\r\n                            />\r\n                            <label htmlFor='online'>Online</label>\r\n                        </div>\r\n                        <div className={styles.radioBtnHolder}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"studyingLocation\"\r\n                                id=\"student-place\"\r\n                                value=\"student\"\r\n                                checked={studyingMode==='student'}\r\n                                onChange={changeStudyingMode}\r\n                            />\r\n                            <label htmlFor='student-place'>At your place</label>\r\n                        </div>\r\n                        <div className={styles.radioBtnHolder}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"studyingLocation\"\r\n                                id=\"teacher-place\"\r\n                                value=\"teacher\"\r\n                                checked={studyingMode==='teacher'}\r\n                                onChange={changeStudyingMode}\r\n                            />\r\n                            <label htmlFor='teacher-place'>At teacher's place / Institute</label>\r\n                        </div>\r\n                {/* =================================Pincode section===================================== */}\r\n                        <div className={styles.inputHolder}>\r\n                            <label htmlFor='pincode'>Pincode</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className={`${errors.pincode? styles.validationError:styles.inputBox}`}\r\n                                name=\"pincode\"\r\n                                id=\"pincode\"\r\n                                placeholder=\"\"\r\n                                value={values.pincode || \"\"}\r\n                                onChange={pincodeChangeHandler}\r\n                            />\r\n                            <div className={styles.errorMsg}>{errors.pincode||localErrors.pincode}</div>\r\n                        </div>\r\n                {/* ========================== Subjects dropdown======================= */}\r\n                        <div className={styles.dropdownHolder}>\r\n                            <label>Select subjects you want to study</label>\r\n                            <Select\r\n                                multi\r\n                                create\r\n                                options={subjects}\r\n                                onChange={onSubjectChange}\r\n                                color=\"#2876A0\"\r\n                                labelField='value'\r\n                                values={subjectList}\r\n                                sortBy='value'\r\n                            />\r\n                            <div className={styles.errorMsg}>{localErrors.subjectDropdown}</div>\r\n                        </div>\r\n                {/* =================================Discription section===================================== */}\r\n                        <div className={styles.inputHolder}>\r\n                            <label htmlFor='discripton'>Discription (Optional)</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={`${errors.discription? styles.validationError:styles.inputBox}`}\r\n                                name=\"discription\"\r\n                                id=\"discription\"\r\n                                placeholder=\"A precise discription of what you want to study.\"\r\n                                value={values.discription || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <div className={styles.errorMsg}>{errors.discription}</div>\r\n                        </div>\r\n                {/* ============================Class drop down=================== */}\r\n                    <div className={styles.dropdownHolder}>\r\n                        <label>Select your class</label>\r\n                        <Select\r\n                            options={studentClasses}\r\n                            onChange={onStudentClassChange}\r\n                            color=\"#2876A0\"\r\n                            labelField='value'\r\n                            values={studentClass}\r\n                        />\r\n                        <div className={styles.errorMsg}>{localErrors.studentClassesDropdwn}</div>\r\n                    </div>\r\n                    \r\n                {/* ==========================Submit button============================= */}\r\n                        <div className={styles.inputHolder}>\r\n                                <input\r\n                                    type=\"submit\"\r\n                                    className={`${styles.inputBox}`}\r\n                                    value={isLoading||areLocationsLoading?`Loading...`:`Proceed`}\r\n                                    disabled={isLoading||areLocationsLoading}\r\n                                />\r\n                        </div>\r\n                    </div>                    \r\n                </motion.form>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default TutorInfoForm;\r\n","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\index.js",[],["335","336"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\tutorFeeDetailForm\\tutorFeeDetailForm.js",["337"],"import React,{useState,useContext,useEffect} from \"react\";\r\nimport {Redirect} from 'react-router-dom'\r\nimport { userContext } from \"../../context/userContext\";\r\nimport axios from 'axios'\r\nimport useForm from '../../hooks/useForm'\r\nimport validationRules from '../../validationRules/tutorFeeDetailFormValidationRules'\r\nimport {motion} from 'framer-motion';\r\nimport 'aos/dist/aos.css'\r\nimport styles from '../AuthForm/authForm.module.scss'\r\n\r\nconst TutorFeeDetailForm=({formType, setFormType,backUrl,isEditProfileForm})=> {\r\n    const [isSubmited,setIsSubmited]=useState(false);\r\n    const [feeDuration,setFeeDuration]=useState('monthly');\r\n    const {setUser,setAlertMsg,userLoaded,user,setBannerMsg} = useContext(userContext);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n\r\n    const changeFeeDuration=(e)=>{\r\n        setFeeDuration(e.target.value);\r\n    }\r\n    const submitHandler =async () => {\r\n        const data = {\r\n            _id:user._id,\r\n            feesPeriod:feeDuration,\r\n            feeAmount: values.feeAmount,\r\n            accountNumber:values.accountNumber,\r\n            ifscCode:values.ifscCode,\r\n            accountHolder:values.accountHolder,\r\n            isStepTwoDone:true,\r\n            isActive:true\r\n        };\r\n        try{\r\n            setIsLoading(true);\r\n            const res = await axios.put(`/api/teachers/update`,data,{headers:{'x-auth-token':localStorage.getItem(\"token\")}});\r\n            if(!res.data.error){\r\n                setUser(res.data.result);\r\n                setIsSubmited(true);\r\n            }\r\n            else {\r\n                setAlertMsg({message:res.data.error});\r\n            }\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n            setBannerMsg({message:`Something went wrong!`});\r\n        } \r\n        setIsLoading(false);\r\n    };\r\n    const { values, errors, handleChange, handleSubmit,setValues} = useForm(\r\n        submitHandler,\r\n        validationRules\r\n    );\r\n    useEffect(()=>{\r\n        if(user&&isEditProfileForm){\r\n            setValues({...user})\r\n            setFeeDuration(user.feesPeriod)\r\n        }\r\n    },[setValues,user,isEditProfileForm])\r\n    if(isSubmited&&!isLoading){\r\n        if(!isEditProfileForm){\r\n            alert(`Thank You for completing your registration. As a token of gratitude we are giving you 5 free credits and we have posted a free ad for you.`)\r\n        }\r\n        return(<Redirect to={backUrl||'/connect'}/>)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n        \r\n                <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <h3>{isEditProfileForm?'Edit Fee Details':'Fees Details'}</h3>\r\n                    <div className={styles.inputContainer}>\r\n                {/* ============================Fee Duration Radio============================= */}\r\n                    <div className={styles.radioLabelHolder}><label htmlFor='feeDuration'>When would you like to collect the fees from Modern Kaksha? </label></div>\r\n                        <div className={styles.radioBtnHolder}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"feeDuration\"\r\n                                id=\"weekly\"\r\n                                value=\"weekly\"\r\n                                checked={feeDuration==='weekly'}\r\n                                onChange={changeFeeDuration}\r\n                            />\r\n                            <label htmlFor='weekly'>Weekly</label>\r\n                        </div>\r\n                        <div className={styles.radioBtnHolder}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"feeDuration\"\r\n                                id=\"monthly\"\r\n                                value=\"monthly\"\r\n                                checked={feeDuration==='monthly'}\r\n                                onChange={changeFeeDuration}\r\n                            />\r\n                            <label htmlFor='monthly'>Monthly</label>\r\n                        </div>\r\n                {/* ===================================Fee Amount Textbox========================= */}\r\n                        <div className={styles.inputHolder}>\r\n                            <label htmlFor='feeAmount'>Per Class Fee Amount (INR)</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className={`${errors.feeAmount? styles.validationError:styles.inputBox}`}\r\n                                name=\"feeAmount\"\r\n                                id=\"feeAmount\"\r\n                                placeholder=\"\"\r\n                                value={values.feeAmount || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <div className={styles.errorMsg}>{errors.feeAmount}</div>\r\n                        </div>\r\n\r\n                {/* ===================================Account No. Textbox============================ */}\r\n                        {/* <div className={styles.inputHolder}>\r\n                            <label htmlFor='accountNumber'>Your Account Number</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className={`${errors.accountNumber? styles.validationError:styles.inputBox}`}\r\n                                name=\"accountNumber\"\r\n                                id=\"accountNumber\"\r\n                                placeholder=\"\"\r\n                                value={values.accountNumber || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <div className={styles.errorMsg}>{errors.accountNumber}</div>\r\n                        </div> */}\r\n                {/* ====================================Confirm Account textbox=========================== */}\r\n                        {/* <div className={styles.inputHolder}>\r\n                            <label htmlFor='confirmAccountNumber'>Confirm Account Number</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className={`${errors.confirmAccountNumber? styles.validationError:styles.inputBox}`}\r\n                                name=\"confirmAccountNumber\"\r\n                                id=\"confirmAccountNumber\"\r\n                                placeholder=\"\"\r\n                                value={values.confirmAccountNumber || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <div className={styles.errorMsg}>{errors.confirmAccountNumber}</div>\r\n                        </div> */}\r\n                {/* =====================================Ifsc textbox====================================== */}\r\n                        {/* <div className={styles.inputHolder}>\r\n                            <label htmlFor='ifscCode'>IFSC code</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={`${errors.ifscCode? styles.validationError:styles.inputBox}`}\r\n                                name=\"ifscCode\"\r\n                                id=\"ifscCode\"\r\n                                placeholder=\"\"\r\n                                value={values.ifscCode || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <div className={styles.errorMsg}>{errors.ifscCode}</div>\r\n                        </div> */}\r\n                {/* ===================================Account Holder Name=================================== */}\r\n                        {/* <div className={styles.inputHolder}>\r\n                            <label htmlFor='accountHolder'>Account Holder's Name</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className={`${errors.accountHolder? styles.validationError:styles.inputBox}`}\r\n                                name=\"accountHolder\"\r\n                                id=\"accountHolder\"\r\n                                placeholder=\"\"\r\n                                value={values.accountHolder || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                            <div className={styles.errorMsg}>{errors.accountHolder}</div>\r\n                        </div> */}\r\n                \r\n                        <div className={styles.inputHolder}>\r\n                                <input\r\n                                    type=\"submit\"\r\n                                    value={isLoading?`Loading...`:`Proceed`}\r\n                                    disabled={isLoading}\r\n                                />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </motion.form>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default TutorFeeDetailForm;\r\n","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\TutorRegistrationForm\\tutorRegistrationForm.js",["338","339","340"],"import React, { useEffect, useState,useContext } from 'react';\r\nimport { userContext } from \"../../context/userContext\";\r\nimport axios from 'axios';\r\nimport Loader from '../Loader/loader'\r\nimport useForm from '../../hooks/useForm';\r\nimport validationRules from '../../validationRules/registerationFormValidationRules';\r\nimport {motion} from 'framer-motion';\r\nimport styles from '../AuthForm/authForm.module.scss';\r\n\r\nconst TutorRegistrationForm= ({formType, setFormType})=> {\r\n    const [registerationSuccess,setRegisterationSuccess]=useState(false);\r\n    const[tncAgreed,setTncAgreed]=useState(false);\r\n    const[tncValidatonErr,setTncValidationErr]=useState(null);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const {setUser,setAlertMsg,userLoaded,setBannerMsg } = useContext(userContext);\r\n    const[localErrors,setLocalErrors]=useState({});\r\n    const [profilePic,setProfilePic]=useState();\r\n    const [isFileBig,setIsFileBig]=useState(false);\r\n\r\n    useEffect(()=>{\r\n        if(userLoaded){\r\n          localStorage.removeItem('token');\r\n          setUser(null);\r\n        }\r\n    },[userLoaded]);\r\n\r\n    useEffect(()=>{\r\n        if(registerationSuccess){\r\n            setFormType('tutorVerifyEmailForm')\r\n        }\r\n    },[registerationSuccess])\r\n\r\n    const profilePicChangeHandler=(e)=>{\r\n        setProfilePic(e.target.files[0]);\r\n        setIsFileBig(false);\r\n        if(e.target.files.length===0){\r\n            setLocalErrors({profilePicture:'Profile picture is required'});\r\n        }\r\n        else{\r\n            let fsize=e.target.files[0].size;\r\n            const file = Math.round((fsize / 1024)); \r\n            if (e.target.files.length!==0&&file > 512) { \r\n                setIsFileBig(true)\r\n                setLocalErrors({profilePicture:'Please select a file less than 500kb'});\r\n                alert(\"File too Big, please select a file less than 500kb\"); \r\n            }\r\n            else{\r\n                setLocalErrors({profilePicture:''});\r\n            }\r\n        }\r\n    }\r\n\r\n    const registerationHandler =async () => {\r\n        if(tncAgreed&&!isFileBig){\r\n            setIsLoading(true);\r\n            setTncValidationErr(null);\r\n            const formData=new FormData();\r\n            formData.append('name',values.fullName);\r\n            formData.append('email',values.email);\r\n            formData.append('contactNumber',values.contactNumber);\r\n            formData.append('password',values.password);\r\n            formData.append('profilePicture',profilePic);\r\n            \r\n            try{\r\n                const config = {\r\n                    headers: {\r\n                        'content-type': 'multipart/form-data'\r\n                    }\r\n                };\r\n                const res = await axios.post(`/api/teachers/register`,formData,config);\r\n                if(!res.data.error){\r\n                    localStorage.setItem(\"token\", res.data.result.token);\r\n                    setUser(res.data.result.user);\r\n                    setRegisterationSuccess(true);\r\n                }\r\n                else {\r\n                    localStorage.removeItem(\"token\");\r\n                    setUser(null);\r\n                    setAlertMsg({message:res.data.error});\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                setBannerMsg({message:`Something went wrong!`});\r\n            } \r\n            setIsLoading(false) \r\n        }\r\n        else if(!tncAgreed){\r\n            setTncValidationErr('Agree to terms and conditions to proceed');\r\n        }\r\n        else if(!profilePic){\r\n            setLocalErrors({profilePicture:'Profile picture is required'});\r\n        }\r\n      };\r\n    const { values, errors, handleChange, handleSubmit } = useForm(\r\n        registerationHandler,\r\n        validationRules\r\n    );\r\n    return (\r\n\r\n      <React.Fragment>\r\n        <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit}>\r\n            <h3>Tutor Registration</h3>\r\n            <div className={styles.inputContainer}>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='full-name'>Name*</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className={`${errors.fullName? styles.validationError:styles.inputBox}`}\r\n                        name=\"fullName\"\r\n                        id=\"full-name\"\r\n                        placeholder=\"\"\r\n                        autoFocus\r\n                        value={values.fullName || \"\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <div className={styles.errorMsg}>{errors.fullName}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='email'>Email*</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        className={`${errors.email? styles.validationError:styles.inputBox}`}\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"\"\r\n                        value={values.email || \"\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <div className={styles.errorMsg}>{errors.email}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='contact'>Contact Number*</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            className={`${errors.contactNumber? styles.validationError:styles.inputBox}`}\r\n                            name=\"contactNumber\"\r\n                            id=\"contact\"\r\n                            placeholder=\"\"\r\n                            value={values.contactNumber || \"\"}\r\n                            onChange={handleChange}\r\n                        />\r\n                    <div className={styles.errorMsg}>{errors.contactNumber}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='password'>Password*</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`${errors.password? styles.validationError:styles.inputBox}`}\r\n                            name=\"password\"\r\n                            id=\"password\"\r\n                            placeholder=\"\"\r\n                            value={values.password || \"\"}\r\n                            onChange={handleChange}\r\n                        />\r\n                    <div className={styles.errorMsg}>{errors.password}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='confirm-password'>Confirm Password*</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`${errors.confirmPassword? styles.validationError:styles.inputBox}`}\r\n                            name=\"confirmPassword\"\r\n                            id=\"confirm-password\"\r\n                            placeholder=\"\"\r\n                            value={values.confirmPassword || \"\"}\r\n                            onChange={handleChange}\r\n                        />\r\n                    <div className={styles.errorMsg}>{errors.confirmPassword}</div>\r\n                </div>\r\n                <div className={styles.inputHolder}>\r\n                    <label htmlFor='profilePicture'>Profile Picture (optional)</label>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={`${styles.inputBox}`}\r\n                            name=\"profilePicture\"\r\n                            id=\"profilePicture\"\r\n                            onChange={profilePicChangeHandler}\r\n                            accept=\"image/*\"\r\n                        />\r\n                        <div className={styles.errorMsg}>{localErrors.profilePicture}</div>\r\n                </div>\r\n                <div className={styles.checkboxHolder}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"userTerms\"\r\n                            id=\"user-terms\"\r\n                            checked={tncAgreed}\r\n                            onChange={()=>{\r\n                                !tncAgreed&&setTncValidationErr(null)\r\n                                setTncAgreed(prev=>!prev)\r\n                            }}\r\n                        />\r\n                    <label htmlFor='user-terms'>I agree to <span>terms and conditions</span></label>\r\n                </div>\r\n                <div className={styles.errorMsg}>{tncValidatonErr}</div>\r\n                <div className={styles.inputHolder}>\r\n                        <input\r\n                            type=\"submit\"\r\n                            className={`${styles.inputBox}`}\r\n                            value={isLoading?`Loading...`:`Register`}\r\n                            disabled={isLoading}\r\n                        />\r\n                </div>\r\n                <p>Already registered? \r\n                    <span onClick={()=>{setFormType('tutorLogin')}}>Login</span>\r\n                </p>\r\n            </div>\r\n        </motion.form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default TutorRegistrationForm;\r\n",["341","342"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\AdminPanel\\StudentsSec.js",["343","344","345","346"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\hooks\\useForm.js",["347","348","349"],"import { useState, useEffect } from 'react';\r\n\r\nexport default (callback, validate) => {\r\n\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [touched, setTouched] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && isSubmitting) {\r\n      callback();\r\n    }\r\n  }, [errors]);\r\n\r\n  useEffect(() => {\r\n      setErrors(validate(values,touched));\r\n  }, [values,touched]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.persist();\r\n    event.preventDefault(); \r\n    setIsSubmitting(true);\r\n    for(let i=0;i<event.target.length;i++){\r\n      setTouched(touched=>({...touched,[event.target[i].name]:true}));\r\n    }\r\n  };\r\n  const clearAllValues = (event) => {\r\n    setValues({});\r\n    setTouched({});\r\n    setIsSubmitting(false);\r\n  };\r\n  const clearValue = (controlName) => {\r\n    setValues(values=>({...values,[controlName]:false}));\r\n    setTouched(touched=>({...touched,[controlName]:false}));\r\n    setIsSubmitting(false);\r\n  };\r\n  const markTouched = (controlName) => {\r\n      setTouched(touched=>({...touched,[controlName]:true}));\r\n  };\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n    setIsSubmitting(false);\r\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\r\n    setTouched(touched=>({...touched,[event.target.name]:true}));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n    markTouched,\r\n    clearAllValues,\r\n    setValues,\r\n    clearValue\r\n  }\r\n};\r\n",["350","351"],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\Loader\\loader.js",[],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\data\\data.js",[],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\StudentRegistrationForm\\studentRegistrationForm.js",["352","353","354","355"],"import React, { useEffect, useState,useContext } from 'react';\r\nimport { userContext } from \"../../context/userContext\";\r\nimport axios from 'axios';\r\nimport useForm from '../../hooks/useForm'\r\nimport validationRules from '../../validationRules/registerationFormValidationRules'\r\nimport {motion} from 'framer-motion'\r\nimport styles from '../AuthForm/authForm.module.scss'\r\n\r\nconst StudentRegistrationForm=({formType, setFormType})=> {\r\n    const [registerationSuccess,setRegisterationSuccess]=useState(false);\r\n    const[tncAgreed,setTncAgreed]=useState(false);\r\n    const[tncValidatonErr,setTncValidationErr]=useState(null);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n    const {setUser,setAlertMsg,userLoaded,setBannerMsg } = useContext(userContext);\r\n    const[localErrors,setLocalErrors]=useState({});\r\n    const [profilePic,setProfilePic]=useState();\r\n    const [isInfoCaptured,setIsInfoCaptured]=useState(false);\r\n    const [isFileBig,setIsFileBig]=useState(false);\r\n    useEffect(()=>{\r\n        if(userLoaded){\r\n          localStorage.removeItem('token');\r\n          setUser(null);\r\n        }\r\n    },[userLoaded]);\r\n\r\n    useEffect(()=>{\r\n        if(registerationSuccess){\r\n            setFormType('studentVerifyEmailForm')\r\n        }\r\n    },[registerationSuccess]);\r\n\r\n    const profilePicChangeHandler=(e)=>{\r\n        setProfilePic(e.target.files[0]);\r\n        setIsFileBig(false);\r\n        \r\n        \r\n        if(e.target.files.length===0){\r\n            setLocalErrors({profilePicture:'Profile picture is required'});\r\n        }\r\n        else{\r\n            let fsize=e.target.files[0].size;\r\n            const file = Math.round((fsize / 1024));\r\n            if (e.target.files.length!==0&&file > 512) {  \r\n                setIsFileBig(true)\r\n                setLocalErrors({profilePicture:'Please select a file less than 500kb'});\r\n                alert(\"File too Big, please select a file less than 500kb\"); \r\n            }\r\n            else{\r\n                setLocalErrors({profilePicture:''});\r\n            }\r\n        }\r\n    }\r\n    const registerationHandler =async () => {\r\n        if(tncAgreed&&!isFileBig){\r\n            setIsLoading(true);\r\n            setTncValidationErr(null);\r\n            const formData=new FormData();\r\n            formData.append('name',values.fullName);\r\n            formData.append('email',values.email);\r\n            formData.append('contactNumber',values.contactNumber);\r\n            formData.append('password',values.password);\r\n            formData.append('profilePicture',profilePic);\r\n            try{\r\n                const config = {\r\n                    headers: {\r\n                        'content-type': 'multipart/form-data'\r\n                    }\r\n                };\r\n                const res = await axios.post(`/api/students/register`,formData,config);\r\n                if(!res.data.error){\r\n                    localStorage.setItem(\"token\", res.data.result.token);\r\n                    setUser(res.data.result.user);\r\n                    setRegisterationSuccess(true);\r\n                }\r\n                else {\r\n                    localStorage.removeItem(\"token\");\r\n                    setUser(null);\r\n                    setAlertMsg({message:res.data.error});\r\n                }\r\n            }\r\n            catch(err){\r\n                console.log(err);\r\n                setBannerMsg({message:`Something went wrong!`});\r\n            } \r\n            setIsLoading(false);\r\n        }\r\n        else if(!tncAgreed){\r\n            setTncValidationErr('Agree to terms and conditions to proceed');\r\n        }\r\n        else if(!profilePic){\r\n            setLocalErrors({profilePicture:'Profile picture is required'});\r\n        }\r\n    };\r\n    const { values, errors, handleChange, handleSubmit } = useForm(\r\n    registerationHandler,\r\n    validationRules\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <motion.form initial={{opacity:0,x:-300}} animate={{opacity:1,x:0}} onSubmit={handleSubmit} >\r\n                <h3>Student Registration</h3>\r\n                <div className={styles.inputContainer}>\r\n                    <div className={styles.inputHolder}>\r\n                        <label htmlFor='full-name'>Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className={`${errors.fullName? styles.validationError:styles.inputBox}`}\r\n                            name=\"fullName\"\r\n                            id=\"full-name\"\r\n                            placeholder=\"\"\r\n                            autoFocus\r\n                            value={values.fullName || \"\"}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <div className={styles.errorMsg}>{errors.fullName}</div>\r\n                    </div>\r\n                    <div className={styles.inputHolder}>\r\n                        <label htmlFor='email'>Email*</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            className={`${errors.email? styles.validationError:styles.inputBox}`}\r\n                            name=\"email\"\r\n                            id=\"email\"\r\n                            placeholder=\"\"\r\n                            value={values.email || \"\"}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <div className={styles.errorMsg}>{errors.email}</div>\r\n                    </div>\r\n                    <div className={styles.inputHolder}>\r\n                        <label htmlFor='contact'>Contact Number*</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className={`${errors.contactNumber? styles.validationError:styles.inputBox}`}\r\n                                name=\"contactNumber\"\r\n                                id=\"contact\"\r\n                                placeholder=\"\"\r\n                                value={values.contactNumber || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                        <div className={styles.errorMsg}>{errors.contactNumber}</div>\r\n                    </div>\r\n                    <div className={styles.inputHolder}>\r\n                        <label htmlFor='password'>Password*</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                className={`${errors.password? styles.validationError:styles.inputBox}`}\r\n                                name=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"\"\r\n                                value={values.password || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                        <div className={styles.errorMsg}>{errors.password}</div>\r\n                    </div>\r\n                    <div className={styles.inputHolder}>\r\n                        <label htmlFor='confirm-password'>Confirm Password*</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                className={`${errors.confirmPassword? styles.validationError:styles.inputBox}`}\r\n                                name=\"confirmPassword\"\r\n                                id=\"confirm-password\"\r\n                                placeholder=\"\"\r\n                                value={values.confirmPassword || \"\"}\r\n                                onChange={handleChange}\r\n                            />\r\n                        <div className={styles.errorMsg}>{errors.confirmPassword}</div>\r\n                    </div>\r\n                    <div className={styles.inputHolder}>\r\n                    <label htmlFor='confirm-password'>Profile Picture (Optional)</label>\r\n                        <input\r\n                            type=\"file\"\r\n                            className={`${styles.inputBox}`}\r\n                            name=\"profilePicture\"\r\n                            id=\"profilePicture\"\r\n                            onChange={profilePicChangeHandler}\r\n                            accept=\"image/*\"\r\n                        />\r\n                        <div className={styles.errorMsg}>{localErrors.profilePicture}</div>\r\n                    </div>\r\n                    <div className={styles.checkboxHolder}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                name=\"userTerms\"\r\n                                id=\"user-terms\"\r\n                                onChange={()=>{\r\n                                    !tncAgreed&&setTncValidationErr(null)\r\n                                    setTncAgreed(prev=>!prev)\r\n                                }}\r\n                            />\r\n                        <label htmlFor='user-terms'>I agree to <span>terms and conditions</span></label>\r\n                    </div>\r\n                    <div className={styles.errorMsg}>{tncValidatonErr}</div>\r\n                    <div className={styles.inputHolder}>\r\n                            <input\r\n                                type=\"submit\"\r\n                                className={`${styles.inputBox}`}\r\n                                value={isLoading?`Loading...`:`Register`}\r\n                                disabled={isLoading}\r\n                            />\r\n                    </div>\r\n                    <p>Already registered? \r\n                        <span onClick={()=>{setFormType('studentLogin')}}>Login</span>\r\n                    </p>\r\n                </div>\r\n            </motion.form>\r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default StudentRegistrationForm;","F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\componenets\\HomePage\\homePage.js",[],"F:\\Users\\Acer\\Desktop\\Projects\\deltaEducators\\client\\src\\App.js",["356","357"],"import React, { useEffect, useState} from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport UserContextProvider from \"./context/userContext\";\nimport Header from './componenets/Header/header'\nimport Nav from './componenets/Nav/nav'\nimport HomePage from './componenets/HomePage/homePage';\nimport RegisterPage from './componenets/AuthPage/authPage';\nimport TutorInfoForm from './componenets/TutorInfoForm/tutorInfoForm';\nimport Footer from './componenets/Footer/footer';\nimport TutorFeeDetails from './componenets/tutorFeeDetailForm/tutorFeeDetailForm'\nimport ChoosePlanPage from './componenets/choosePlanPage/choosePlanPage';\nimport ProfilePage from './componenets/ProfilePage/ProfilePage';\nimport ConnectPage from './componenets/connectPage/connectPage'\nimport ErrorPage from './componenets/PageNotFoundErrorPage/pageNotFoundErrorPage'\nimport './App.module.scss'\nimport Loader from './componenets/Loader/loader';\nimport MsgBanner from './componenets/MsgBanner/msgBanner';\nimport ContactUsForm from './componenets/ContactUsForm/contactUsForm';\nimport AdminPanel from './componenets/AdminPanel/adminPanel';\n\nconst App=()=> {\n  const [isLoading,setIsLoading]=useState(false);\n  // useEffect(()=>{\n  //   window.scrollTo(0, 1);\n  //   window.setTimeout(()=>{\n  //     setIsLoading(false)\n  //   },1000)\n  // },[])\n  return (\n    <>\n      {isLoading ?\n        <div style={{'minHeight':'100vh','width':'100vw','position':'absolute','top':0,'bottom':0}}><Loader/></div>\n    :\n    <UserContextProvider>\n      <Router>\n        <Header/>\n        <Nav/>\n        <Switch>\n            <Route exact path=\"/\">\n              <HomePage/>\n            </Route>\n            <Route exact path=\"/auth\">\n              <RegisterPage/>\n            </Route>\n            <Route exact path=\"/tutor-info\">\n              <TutorInfoForm/>\n            </Route>\n            <Route exact path=\"/tutor-fee\">\n              <TutorFeeDetails/>\n            </Route>\n            <Route exact path=\"/choose-plan\">\n              <ChoosePlanPage/>\n            </Route>\n            <Route path=\"/profile/:id\">\n              <ProfilePage/>\n            </Route>\n            <Route exact path=\"/connect\">\n              <ConnectPage/>\n            </Route>\n            <Route exact path=\"/contact-us\">\n              <ContactUsForm/>\n            </Route>\n            <Route exact path=\"/admin\">\n              <AdminPanel/>\n            </Route>\n            {/* =============================404========================== */}\n            <Route >\n              <ErrorPage/>\n            </Route>\n        </Switch>\n        <MsgBanner/>\n        <Footer/>\n      </Router>\n    </UserContextProvider>\n  }\n   </> \n  );\n}\n\nexport default App;\n",["358","359"],{"ruleId":"360","severity":1,"message":"361","line":4,"column":1,"nodeType":"362","endLine":57,"endColumn":3},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","severity":1,"message":"368","line":8,"column":41,"nodeType":"369","messageId":"370","endLine":8,"endColumn":52},{"ruleId":"367","severity":1,"message":"371","line":11,"column":11,"nodeType":"369","messageId":"370","endLine":11,"endColumn":18},{"ruleId":"372","severity":1,"message":"373","line":60,"column":7,"nodeType":"374","endLine":60,"endColumn":18,"suggestions":"375"},{"ruleId":"367","severity":1,"message":"376","line":72,"column":19,"nodeType":"369","messageId":"370","endLine":72,"endColumn":22},{"ruleId":"363","replacedBy":"377"},{"ruleId":"365","replacedBy":"378"},{"ruleId":"367","severity":1,"message":"379","line":13,"column":10,"nodeType":"369","messageId":"370","endLine":13,"endColumn":26},{"ruleId":"363","replacedBy":"380"},{"ruleId":"365","replacedBy":"381"},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":30,"endColumn":5},{"ruleId":"363","replacedBy":"382"},{"ruleId":"365","replacedBy":"383"},{"ruleId":"367","severity":1,"message":"371","line":15,"column":11,"nodeType":"369","messageId":"370","endLine":15,"endColumn":18},{"ruleId":"372","severity":1,"message":"384","line":22,"column":9,"nodeType":"374","endLine":22,"endColumn":21,"suggestions":"385"},{"ruleId":"363","replacedBy":"386"},{"ruleId":"365","replacedBy":"387"},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":41,"endColumn":5},{"ruleId":"367","severity":1,"message":"388","line":4,"column":8,"nodeType":"369","messageId":"370","endLine":4,"endColumn":16},{"ruleId":"367","severity":1,"message":"389","line":12,"column":12,"nodeType":"369","messageId":"370","endLine":12,"endColumn":19},{"ruleId":"367","severity":1,"message":"390","line":12,"column":32,"nodeType":"369","messageId":"370","endLine":12,"endColumn":42},{"ruleId":"372","severity":1,"message":"391","line":31,"column":7,"nodeType":"374","endLine":31,"endColumn":29,"suggestions":"392"},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":14,"endColumn":5},{"ruleId":"360","severity":1,"message":"361","line":6,"column":1,"nodeType":"362","endLine":24,"endColumn":3},{"ruleId":"393","severity":1,"message":"394","line":14,"column":40,"nodeType":"395","endLine":14,"endColumn":56},{"ruleId":"367","severity":1,"message":"396","line":1,"column":10,"nodeType":"369","messageId":"370","endLine":1,"endColumn":13},{"ruleId":"367","severity":1,"message":"368","line":12,"column":41,"nodeType":"369","messageId":"370","endLine":12,"endColumn":52},{"ruleId":"367","severity":1,"message":"397","line":15,"column":12,"nodeType":"369","messageId":"370","endLine":15,"endColumn":25},{"ruleId":"367","severity":1,"message":"398","line":15,"column":26,"nodeType":"369","messageId":"370","endLine":15,"endColumn":42},{"ruleId":"363","replacedBy":"399"},{"ruleId":"365","replacedBy":"400"},{"ruleId":"367","severity":1,"message":"401","line":1,"column":32,"nodeType":"369","messageId":"370","endLine":1,"endColumn":40},{"ruleId":"360","severity":1,"message":"361","line":7,"column":1,"nodeType":"362","endLine":53,"endColumn":3},{"ruleId":"367","severity":1,"message":"402","line":8,"column":11,"nodeType":"369","messageId":"370","endLine":8,"endColumn":21},{"ruleId":"367","severity":1,"message":"403","line":9,"column":17,"nodeType":"369","messageId":"370","endLine":9,"endColumn":29},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":14,"endColumn":5},{"ruleId":"363","replacedBy":"404"},{"ruleId":"365","replacedBy":"405"},{"ruleId":"372","severity":1,"message":"384","line":21,"column":7,"nodeType":"374","endLine":21,"endColumn":19,"suggestions":"406"},{"ruleId":"363","replacedBy":"407"},{"ruleId":"365","replacedBy":"408"},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":11,"endColumn":5},{"ruleId":"367","severity":1,"message":"409","line":3,"column":37,"nodeType":"369","messageId":"370","endLine":3,"endColumn":45},{"ruleId":"367","severity":1,"message":"390","line":12,"column":36,"nodeType":"369","messageId":"370","endLine":12,"endColumn":46},{"ruleId":"367","severity":1,"message":"371","line":16,"column":9,"nodeType":"369","messageId":"370","endLine":16,"endColumn":16},{"ruleId":"372","severity":1,"message":"410","line":23,"column":5,"nodeType":"374","endLine":23,"endColumn":15,"suggestions":"411"},{"ruleId":"372","severity":1,"message":"412","line":73,"column":5,"nodeType":"374","endLine":73,"endColumn":19,"suggestions":"413"},{"ruleId":"393","severity":1,"message":"394","line":131,"column":11,"nodeType":"395","endLine":131,"endColumn":28},{"ruleId":"363","replacedBy":"414"},{"ruleId":"365","replacedBy":"415"},{"ruleId":"360","severity":1,"message":"361","line":9,"column":1,"nodeType":"362","endLine":60,"endColumn":3},{"ruleId":"367","severity":1,"message":"416","line":10,"column":26,"nodeType":"369","messageId":"370","endLine":10,"endColumn":34},{"ruleId":"367","severity":1,"message":"403","line":10,"column":35,"nodeType":"369","messageId":"370","endLine":10,"endColumn":47},{"ruleId":"367","severity":1,"message":"389","line":10,"column":48,"nodeType":"369","messageId":"370","endLine":10,"endColumn":55},{"ruleId":"363","replacedBy":"417"},{"ruleId":"365","replacedBy":"418"},{"ruleId":"372","severity":1,"message":"419","line":26,"column":7,"nodeType":"374","endLine":26,"endColumn":23,"suggestions":"420"},{"ruleId":"367","severity":1,"message":"421","line":1,"column":49,"nodeType":"369","messageId":"370","endLine":1,"endColumn":56},{"ruleId":"367","severity":1,"message":"422","line":8,"column":25,"nodeType":"369","messageId":"370","endLine":8,"endColumn":29},{"ruleId":"367","severity":1,"message":"390","line":8,"column":30,"nodeType":"369","messageId":"370","endLine":8,"endColumn":40},{"ruleId":"367","severity":1,"message":"368","line":8,"column":41,"nodeType":"369","messageId":"370","endLine":8,"endColumn":52},{"ruleId":"367","severity":1,"message":"423","line":9,"column":12,"nodeType":"369","messageId":"370","endLine":9,"endColumn":21},{"ruleId":"367","severity":1,"message":"424","line":11,"column":16,"nodeType":"369","messageId":"370","endLine":11,"endColumn":24},{"ruleId":"372","severity":1,"message":"425","line":68,"column":7,"nodeType":"374","endLine":68,"endColumn":14,"suggestions":"426"},{"ruleId":"367","severity":1,"message":"389","line":12,"column":12,"nodeType":"369","messageId":"370","endLine":12,"endColumn":19},{"ruleId":"367","severity":1,"message":"390","line":12,"column":32,"nodeType":"369","messageId":"370","endLine":12,"endColumn":42},{"ruleId":"372","severity":1,"message":"391","line":31,"column":7,"nodeType":"374","endLine":31,"endColumn":29,"suggestions":"427"},{"ruleId":"363","replacedBy":"428"},{"ruleId":"365","replacedBy":"429"},{"ruleId":"367","severity":1,"message":"430","line":5,"column":10,"nodeType":"369","messageId":"370","endLine":5,"endColumn":25},{"ruleId":"367","severity":1,"message":"431","line":6,"column":10,"nodeType":"369","messageId":"370","endLine":6,"endColumn":27},{"ruleId":"360","severity":1,"message":"361","line":10,"column":1,"nodeType":"362","endLine":82,"endColumn":3},{"ruleId":"363","replacedBy":"432"},{"ruleId":"365","replacedBy":"433"},{"ruleId":"367","severity":1,"message":"423","line":8,"column":12,"nodeType":"369","messageId":"370","endLine":8,"endColumn":21},{"ruleId":"372","severity":1,"message":"419","line":59,"column":7,"nodeType":"374","endLine":59,"endColumn":13,"suggestions":"434"},{"ruleId":"363","replacedBy":"435"},{"ruleId":"365","replacedBy":"436"},{"ruleId":"367","severity":1,"message":"437","line":1,"column":46,"nodeType":"369","messageId":"370","endLine":1,"endColumn":52},{"ruleId":"367","severity":1,"message":"438","line":1,"column":54,"nodeType":"369","messageId":"370","endLine":1,"endColumn":65},{"ruleId":"367","severity":1,"message":"409","line":13,"column":10,"nodeType":"369","messageId":"370","endLine":13,"endColumn":18},{"ruleId":"367","severity":1,"message":"439","line":45,"column":11,"nodeType":"369","messageId":"370","endLine":45,"endColumn":30},{"ruleId":"367","severity":1,"message":"440","line":46,"column":12,"nodeType":"369","messageId":"370","endLine":46,"endColumn":31},{"ruleId":"372","severity":1,"message":"441","line":111,"column":7,"nodeType":"374","endLine":111,"endColumn":24,"suggestions":"442"},{"ruleId":"372","severity":1,"message":"373","line":171,"column":7,"nodeType":"374","endLine":171,"endColumn":18,"suggestions":"443"},{"ruleId":"367","severity":1,"message":"444","line":193,"column":11,"nodeType":"369","messageId":"370","endLine":193,"endColumn":30},{"ruleId":"372","severity":1,"message":"445","line":25,"column":7,"nodeType":"374","endLine":25,"endColumn":39,"suggestions":"446"},{"ruleId":"393","severity":1,"message":"394","line":87,"column":58,"nodeType":"395","endLine":87,"endColumn":150},{"ruleId":"393","severity":1,"message":"394","line":89,"column":58,"nodeType":"395","endLine":89,"endColumn":85},{"ruleId":"367","severity":1,"message":"409","line":9,"column":10,"nodeType":"369","messageId":"370","endLine":9,"endColumn":18},{"ruleId":"372","severity":1,"message":"441","line":77,"column":7,"nodeType":"374","endLine":77,"endColumn":24,"suggestions":"447"},{"ruleId":"372","severity":1,"message":"448","line":159,"column":7,"nodeType":"374","endLine":159,"endColumn":13,"suggestions":"449"},{"ruleId":"360","severity":1,"message":"361","line":5,"column":1,"nodeType":"362","endLine":18,"endColumn":2},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":43,"endColumn":5},{"ruleId":"363","replacedBy":"450"},{"ruleId":"365","replacedBy":"451"},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":38,"endColumn":5},{"ruleId":"360","severity":1,"message":"361","line":11,"column":1,"nodeType":"362","endLine":34,"endColumn":3},{"ruleId":"393","severity":1,"message":"394","line":17,"column":11,"nodeType":"395","endLine":17,"endColumn":63},{"ruleId":"393","severity":1,"message":"394","line":18,"column":11,"nodeType":"395","endLine":18,"endColumn":68},{"ruleId":"367","severity":1,"message":"452","line":7,"column":10,"nodeType":"369","messageId":"370","endLine":7,"endColumn":18},{"ruleId":"360","severity":1,"message":"361","line":10,"column":1,"nodeType":"362","endLine":86,"endColumn":3},{"ruleId":"363","replacedBy":"453"},{"ruleId":"365","replacedBy":"454"},{"ruleId":"367","severity":1,"message":"390","line":23,"column":32,"nodeType":"369","messageId":"370","endLine":23,"endColumn":42},{"ruleId":"363","replacedBy":"455"},{"ruleId":"365","replacedBy":"456"},{"ruleId":"367","severity":1,"message":"390","line":14,"column":32,"nodeType":"369","messageId":"370","endLine":14,"endColumn":42},{"ruleId":"367","severity":1,"message":"457","line":4,"column":8,"nodeType":"369","messageId":"370","endLine":4,"endColumn":14},{"ruleId":"372","severity":1,"message":"384","line":25,"column":7,"nodeType":"374","endLine":25,"endColumn":19,"suggestions":"458"},{"ruleId":"372","severity":1,"message":"459","line":31,"column":7,"nodeType":"374","endLine":31,"endColumn":29,"suggestions":"460"},{"ruleId":"363","replacedBy":"461"},{"ruleId":"365","replacedBy":"462"},{"ruleId":"367","severity":1,"message":"368","line":8,"column":41,"nodeType":"369","messageId":"370","endLine":8,"endColumn":52},{"ruleId":"367","severity":1,"message":"371","line":11,"column":11,"nodeType":"369","messageId":"370","endLine":11,"endColumn":18},{"ruleId":"372","severity":1,"message":"373","line":60,"column":7,"nodeType":"374","endLine":60,"endColumn":18,"suggestions":"463"},{"ruleId":"367","severity":1,"message":"376","line":72,"column":19,"nodeType":"369","messageId":"370","endLine":72,"endColumn":22},{"ruleId":"360","severity":1,"message":"361","line":3,"column":1,"nodeType":"362","endLine":58,"endColumn":3},{"ruleId":"372","severity":1,"message":"464","line":14,"column":6,"nodeType":"374","endLine":14,"endColumn":14,"suggestions":"465"},{"ruleId":"372","severity":1,"message":"466","line":18,"column":6,"nodeType":"374","endLine":18,"endColumn":22,"suggestions":"467"},{"ruleId":"363","replacedBy":"468"},{"ruleId":"365","replacedBy":"469"},{"ruleId":"367","severity":1,"message":"470","line":17,"column":12,"nodeType":"369","messageId":"370","endLine":17,"endColumn":26},{"ruleId":"367","severity":1,"message":"471","line":17,"column":27,"nodeType":"369","messageId":"370","endLine":17,"endColumn":44},{"ruleId":"372","severity":1,"message":"384","line":24,"column":7,"nodeType":"374","endLine":24,"endColumn":19,"suggestions":"472"},{"ruleId":"372","severity":1,"message":"459","line":30,"column":7,"nodeType":"374","endLine":30,"endColumn":29,"suggestions":"473"},{"ruleId":"367","severity":1,"message":"474","line":1,"column":17,"nodeType":"369","messageId":"370","endLine":1,"endColumn":26},{"ruleId":"367","severity":1,"message":"475","line":22,"column":20,"nodeType":"369","messageId":"370","endLine":22,"endColumn":32},{"ruleId":"363","replacedBy":"476"},{"ruleId":"365","replacedBy":"477"},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["478"],"no-negated-in-lhs",["479"],"no-unused-vars","'setAlertMsg' is assigned a value but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'refresh' and 'setBannerMsg'. Either include them or remove the dependency array.","ArrayExpression",["480"],"'res' is assigned a value but never used.",["478"],["479"],"'useElementScroll' is defined but never used.",["478"],["479"],["478"],["479"],"React Hook useEffect has a missing dependency: 'setUser'. Either include it or remove the dependency array.",["481"],["478"],["479"],"'AuthForm' is defined but never used.","'setUser' is assigned a value but never used.","'userLoaded' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setBannerMsg' and 'setFormType'. Either include them or remove the dependency array. If 'setFormType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["482"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'set' is defined but never used.","'isRedirecting' is assigned a value but never used.","'setIsRedirecting' is assigned a value but never used.",["478"],["479"],"'useState' is defined but never used.","'cardHolder' is assigned a value but never used.","'setBannerMsg' is assigned a value but never used.",["478"],["479"],["483"],["478"],["479"],"'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'setAlertMsg'. Either include it or remove the dependency array.",["484"],"React Hook useEffect has missing dependencies: 'location.pathname' and 'toggleThinNav'. Either include them or remove the dependency array.",["485"],["478"],["479"],"'setAlert' is assigned a value but never used.",["478"],["479"],"React Hook useEffect has a missing dependency: 'setBannerMsg'. Either include it or remove the dependency array.",["486"],"'useMemo' is defined but never used.","'user' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setCards' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'setBannerMsg'. Either include them or remove the dependency array.",["487"],["488"],["478"],["479"],"'FontAwesomeIcon' is defined but never used.","'faAngleDoubleDown' is defined but never used.",["478"],["479"],["489"],["478"],["479"],"'useRef' is defined but never used.","'useCallback' is defined but never used.","'nearAroundLocations' is assigned a value but never used.","'areLocationsLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'setAlertMsg'. Either include them or remove the dependency array.",["490"],["491"],"'changeFeeModeFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["492"],["493"],"React Hook useEffect has missing dependencies: 'setBannerMsg', 'setUser', and 'user'. Either include them or remove the dependency array.",["494"],["478"],["479"],"'subjects' is defined but never used.",["478"],["479"],["478"],["479"],"'Loader' is defined but never used.",["495"],"React Hook useEffect has a missing dependency: 'setFormType'. Either include it or remove the dependency array. If 'setFormType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["496"],["478"],["479"],["497"],"React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["498"],"React Hook useEffect has a missing dependency: 'validate'. Either include it or remove the dependency array. If 'validate' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["499"],["478"],["479"],"'isInfoCaptured' is assigned a value but never used.","'setIsInfoCaptured' is assigned a value but never used.",["500"],["501"],"'useEffect' is defined but never used.","'setIsLoading' is assigned a value but never used.",["478"],["479"],"no-global-assign","no-unsafe-negation",{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"504","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"506","fix":"517"},{"desc":"518","fix":"519"},{"desc":"520","fix":"521"},{"desc":"502","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"504","fix":"529"},{"desc":"530","fix":"531"},{"desc":"502","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"504","fix":"537"},{"desc":"530","fix":"538"},"Update the dependencies array to be: [data, refresh, setBannerMsg, user]",{"range":"539","text":"540"},"Update the dependencies array to be: [setUser, userLoaded]",{"range":"541","text":"542"},"Update the dependencies array to be: [registerationSuccess, setBannerMsg, setFormType]",{"range":"543","text":"544"},{"range":"545","text":"542"},"Update the dependencies array to be: [alertMsg, setAlertMsg]",{"range":"546","text":"547"},"Update the dependencies array to be: [location.pathname, scrollHeight, toggleThinNav]",{"range":"548","text":"549"},"Update the dependencies array to be: [isDisconnected, setBannerMsg]",{"range":"550","text":"551"},"Update the dependencies array to be: [cards, count, setBannerMsg]",{"range":"552","text":"553"},{"range":"554","text":"544"},"Update the dependencies array to be: [setBannerMsg, user]",{"range":"555","text":"556"},"Update the dependencies array to be: [history, location.pathname, setAlertMsg, user, userLoaded]",{"range":"557","text":"558"},{"range":"559","text":"540"},"Update the dependencies array to be: [connectionSuccess, history, targetUserId]",{"range":"560","text":"561"},"Update the dependencies array to be: [userLoaded, user, setAlertMsg, history, location.pathname]",{"range":"562","text":"563"},"Update the dependencies array to be: [data, setBannerMsg, setUser, user]",{"range":"564","text":"565"},{"range":"566","text":"542"},"Update the dependencies array to be: [registerationSuccess, setFormType]",{"range":"567","text":"568"},{"range":"569","text":"540"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"570","text":"571"},"Update the dependencies array to be: [values, touched, validate]",{"range":"572","text":"573"},{"range":"574","text":"542"},{"range":"575","text":"568"},[2189,2200],"[data, refresh, setBannerMsg, user]",[859,871],"[setUser, userLoaded]",[1185,1207],"[registerationSuccess, setBannerMsg, setFormType]",[817,829],[959,969],"[alertMsg, setAlertMsg]",[1958,1972],"[location.pathname, scrollHeight, toggleThinNav]",[901,917],"[isDisconnected, setBannerMsg]",[2080,2087],"[cards, count, setBannerMsg]",[1189,1211],[1815,1821],"[setBannerMsg, user]",[4319,4336],"[history, location.pathname, setAlertMsg, user, userLoaded]",[6197,6208],[1030,1062],"[connectionSuccess, history, targetUserId]",[3304,3321],"[userLoaded, user, setAlertMsg, history, location.pathname]",[6932,6938],"[data, setBannerMsg, setUser, user]",[1098,1110],[1238,1260],"[registerationSuccess, setFormType]",[2191,2202],[404,412],"[callback, errors, isSubmitting]",[488,504],"[values, touched, validate]",[1117,1129],[1259,1281]]